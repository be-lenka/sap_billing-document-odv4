<?php
/**
 * ItemPartnersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billing Document
 *
 * Billing documents collectively refer to customer invoices, credit memos, debit memos, pro forma invoices, and the related cancellation documents. This service, which offers both synchronous and asynchronous processing, makes billing document data available through its header, item, and partner entities. You can extend it with custom fields via key user extensibility.      You can use this service to do the following:   - Create billing documents with reference to billable SD documents in your system   - Read most billing document fields at header and item level   - Update specific billing document fields, including custom fields added through extensibility   - Post billing documents to financial accounting to create the corresponding journal entriesÂ 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BillingDocumentODV4\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\BillingDocumentODV4\ApiException;
use BeLenka\SAP\BillingDocumentODV4\Configuration;
use BeLenka\SAP\BillingDocumentODV4\HeaderSelector;
use BeLenka\SAP\BillingDocumentODV4\ObjectSerializer;

/**
 * ItemPartnersApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemPartnersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet' => [
            'application/json',
        ],
        'billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet' => [
            'application/json',
        ],
        'billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet' => [
            'application/json',
        ],
        'billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet' => [
            'application/json',
        ],
        'billingDocumentItemPartnerGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet
     *
     * Get entities from related _ItemPartner
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet($billing_document, $billing_document_item, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'][0])
    {
        list($response) = $this->billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGetWithHttpInfo($billing_document, $billing_document_item, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGetWithHttpInfo
     *
     * Get entities from related _ItemPartner
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGetWithHttpInfo($billing_document, $billing_document_item, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'][0])
    {
        $request = $this->billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGetRequest($billing_document, $billing_document_item, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGetAsync
     *
     * Get entities from related _ItemPartner
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGetAsync($billing_document, $billing_document_item, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'][0])
    {
        return $this->billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGetAsyncWithHttpInfo($billing_document, $billing_document_item, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGetAsyncWithHttpInfo
     *
     * Get entities from related _ItemPartner
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGetAsyncWithHttpInfo($billing_document, $billing_document_item, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType';
        $request = $this->billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGetRequest($billing_document, $billing_document_item, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGetRequest($billing_document, $billing_document_item, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling ItemPartnersApi.billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'billing_document_item' is set
        if ($billing_document_item === null || (is_array($billing_document_item) && count($billing_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document_item when calling billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet'
            );
        }
        if (strlen($billing_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$billing_document_item" when calling ItemPartnersApi.billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet, must be smaller than or equal to 6.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ItemPartnersApi.billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ItemPartnersApi.billingDocumentItemBillingDocumentBillingDocumentItemItemPartnerGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/BillingDocumentItem/{BillingDocument}/{BillingDocumentItem}/_ItemPartner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($billing_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocumentItem' . '}',
                ObjectSerializer::toPathValue($billing_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'][0])
    {
        list($response) = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetWithHttpInfo
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'][0])
    {
        $request = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetRequest($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetAsync
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetAsync($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'][0])
    {
        return $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetAsyncWithHttpInfo
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType';
        $request = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetRequest($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetRequest($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling ItemPartnersApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'billing_document_item' is set
        if ($billing_document_item === null || (is_array($billing_document_item) && count($billing_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document_item when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'
            );
        }
        if (strlen($billing_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$billing_document_item" when calling ItemPartnersApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling ItemPartnersApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/BillingDocumentItemPartner/{BillingDocument}/{BillingDocumentItem}/{PartnerFunction}/_BillingDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($billing_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocumentItem' . '}',
                ObjectSerializer::toPathValue($billing_document_item),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet
     *
     * Get entity from BillingDocumentItemPartner by key
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemPartnerType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'][0])
    {
        list($response) = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGetWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGetWithHttpInfo
     *
     * Get entity from BillingDocumentItemPartner by key
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemPartnerType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGetWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'][0])
    {
        $request = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGetRequest($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemPartnerType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemPartnerType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemPartnerType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemPartnerType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemPartnerType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGetAsync
     *
     * Get entity from BillingDocumentItemPartner by key
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGetAsync($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'][0])
    {
        return $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGetAsyncWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGetAsyncWithHttpInfo
     *
     * Get entity from BillingDocumentItemPartner by key
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGetAsyncWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemPartnerType';
        $request = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGetRequest($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGetRequest($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling ItemPartnersApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'billing_document_item' is set
        if ($billing_document_item === null || (is_array($billing_document_item) && count($billing_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document_item when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'
            );
        }
        if (strlen($billing_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$billing_document_item" when calling ItemPartnersApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling ItemPartnersApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/BillingDocumentItemPartner/{BillingDocument}/{BillingDocumentItem}/{PartnerFunction}\';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($billing_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocumentItem' . '}',
                ObjectSerializer::toPathValue($billing_document_item),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet
     *
     * Get related _Item
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'][0])
    {
        list($response) = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGetWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGetWithHttpInfo
     *
     * Get related _Item
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGetWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'][0])
    {
        $request = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGetRequest($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGetAsync
     *
     * Get related _Item
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGetAsync($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'][0])
    {
        return $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGetAsyncWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGetAsyncWithHttpInfo
     *
     * Get related _Item
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGetAsyncWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType';
        $request = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGetRequest($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGetRequest($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling ItemPartnersApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'billing_document_item' is set
        if ($billing_document_item === null || (is_array($billing_document_item) && count($billing_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document_item when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'
            );
        }
        if (strlen($billing_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$billing_document_item" when calling ItemPartnersApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling ItemPartnersApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionItemGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/BillingDocumentItemPartner/{BillingDocument}/{BillingDocumentItem}/{PartnerFunction}/_Item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($billing_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocumentItem' . '}',
                ObjectSerializer::toPathValue($billing_document_item),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentItemPartnerGet
     *
     * Get entities from BillingDocumentItemPartner
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentItemPartnerGet($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerGet'][0])
    {
        list($response) = $this->billingDocumentItemPartnerGetWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentItemPartnerGetWithHttpInfo
     *
     * Get entities from BillingDocumentItemPartner
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentItemPartnerGetWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerGet'][0])
    {
        $request = $this->billingDocumentItemPartnerGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentItemPartnerGetAsync
     *
     * Get entities from BillingDocumentItemPartner
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemPartnerGetAsync($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerGet'][0])
    {
        return $this->billingDocumentItemPartnerGetAsyncWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentItemPartnerGetAsyncWithHttpInfo
     *
     * Get entities from BillingDocumentItemPartner
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemPartnerGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemPartnerType';
        $request = $this->billingDocumentItemPartnerGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentItemPartnerGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentItemPartnerGetRequest($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ItemPartnersApi.billingDocumentItemPartnerGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ItemPartnersApi.billingDocumentItemPartnerGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/BillingDocumentItemPartner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
