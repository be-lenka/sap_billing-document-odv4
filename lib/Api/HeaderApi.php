<?php
/**
 * HeaderApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billing Document
 *
 * Billing documents collectively refer to customer invoices, credit memos, debit memos, pro forma invoices, and the related cancellation documents. This service, which offers both synchronous and asynchronous processing, makes billing document data available through its header, item, and partner entities. You can extend it with custom fields via key user extensibility.      You can use this service to do the following:   - Create billing documents with reference to billable SD documents in your system   - Read most billing document fields at header and item level   - Update specific billing document fields, including custom fields added through extensibility   - Post billing documents to financial accounting to create the corresponding journal entriesÂ 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BillingDocumentODV4\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\BillingDocumentODV4\ApiException;
use BeLenka\SAP\BillingDocumentODV4\Configuration;
use BeLenka\SAP\BillingDocumentODV4\HeaderSelector;
use BeLenka\SAP\BillingDocumentODV4\ObjectSerializer;

/**
 * HeaderApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HeaderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'billingDocumentBillingDocumentGet' => [
            'application/json',
        ],
        'billingDocumentBillingDocumentItemGet' => [
            'application/json',
        ],
        'billingDocumentBillingDocumentPartnerGet' => [
            'application/json',
        ],
        'billingDocumentBillingDocumentPatch' => [
            'application/json',
        ],
        'billingDocumentBillingDocumentSAPSelfPostToAccountingPost' => [
            'application/json',
        ],
        'billingDocumentGet' => [
            'application/json',
        ],
        'billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet' => [
            'application/json',
        ],
        'billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet' => [
            'application/json',
        ],
        'billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet' => [
            'application/json',
        ],
        'billingDocumentSAPSelfCreateFromSDDocumentPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation billingDocumentBillingDocumentGet
     *
     * Get entity from BillingDocument by key
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentBillingDocumentGet($billing_document, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentGet'][0])
    {
        list($response) = $this->billingDocumentBillingDocumentGetWithHttpInfo($billing_document, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentBillingDocumentGetWithHttpInfo
     *
     * Get entity from BillingDocument by key
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentBillingDocumentGetWithHttpInfo($billing_document, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentGet'][0])
    {
        $request = $this->billingDocumentBillingDocumentGetRequest($billing_document, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentBillingDocumentGetAsync
     *
     * Get entity from BillingDocument by key
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentBillingDocumentGetAsync($billing_document, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentGet'][0])
    {
        return $this->billingDocumentBillingDocumentGetAsyncWithHttpInfo($billing_document, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentBillingDocumentGetAsyncWithHttpInfo
     *
     * Get entity from BillingDocument by key
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentBillingDocumentGetAsyncWithHttpInfo($billing_document, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType';
        $request = $this->billingDocumentBillingDocumentGetRequest($billing_document, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentBillingDocumentGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentBillingDocumentGetRequest($billing_document, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentBillingDocumentGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling HeaderApi.billingDocumentBillingDocumentGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/BillingDocument/{BillingDocument}\';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentBillingDocumentItemGet
     *
     * Get entities from related _Item
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentBillingDocumentItemGet($billing_document, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentItemGet'][0])
    {
        list($response) = $this->billingDocumentBillingDocumentItemGetWithHttpInfo($billing_document, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentBillingDocumentItemGetWithHttpInfo
     *
     * Get entities from related _Item
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentBillingDocumentItemGetWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentItemGet'][0])
    {
        $request = $this->billingDocumentBillingDocumentItemGetRequest($billing_document, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentBillingDocumentItemGetAsync
     *
     * Get entities from related _Item
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentBillingDocumentItemGetAsync($billing_document, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentItemGet'][0])
    {
        return $this->billingDocumentBillingDocumentItemGetAsyncWithHttpInfo($billing_document, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentBillingDocumentItemGetAsyncWithHttpInfo
     *
     * Get entities from related _Item
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentBillingDocumentItemGetAsyncWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentItemType';
        $request = $this->billingDocumentBillingDocumentItemGetRequest($billing_document, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentBillingDocumentItemGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentBillingDocumentItemGetRequest($billing_document, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentItemGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentBillingDocumentItemGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling HeaderApi.billingDocumentBillingDocumentItemGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling HeaderApi.billingDocumentBillingDocumentItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling HeaderApi.billingDocumentBillingDocumentItemGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/BillingDocument/{BillingDocument}/_Item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentBillingDocumentPartnerGet
     *
     * Get entities from related _Partner
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentPartnerType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentBillingDocumentPartnerGet($billing_document, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentPartnerGet'][0])
    {
        list($response) = $this->billingDocumentBillingDocumentPartnerGetWithHttpInfo($billing_document, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentBillingDocumentPartnerGetWithHttpInfo
     *
     * Get entities from related _Partner
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentPartnerType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentBillingDocumentPartnerGetWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentPartnerGet'][0])
    {
        $request = $this->billingDocumentBillingDocumentPartnerGetRequest($billing_document, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentPartnerType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentPartnerType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentPartnerType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentPartnerType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentPartnerType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentBillingDocumentPartnerGetAsync
     *
     * Get entities from related _Partner
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentBillingDocumentPartnerGetAsync($billing_document, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentPartnerGet'][0])
    {
        return $this->billingDocumentBillingDocumentPartnerGetAsyncWithHttpInfo($billing_document, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentBillingDocumentPartnerGetAsyncWithHttpInfo
     *
     * Get entities from related _Partner
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentBillingDocumentPartnerGetAsyncWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentPartnerGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentPartnerType';
        $request = $this->billingDocumentBillingDocumentPartnerGetRequest($billing_document, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentBillingDocumentPartnerGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentBillingDocumentPartnerGetRequest($billing_document, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentBillingDocumentPartnerGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentBillingDocumentPartnerGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling HeaderApi.billingDocumentBillingDocumentPartnerGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling HeaderApi.billingDocumentBillingDocumentPartnerGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling HeaderApi.billingDocumentBillingDocumentPartnerGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/BillingDocument/{BillingDocument}/_Partner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentBillingDocumentPatch
     *
     * Update entity in BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentTypeUpdate $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function billingDocumentBillingDocumentPatch($billing_document, $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update, string $contentType = self::contentTypes['billingDocumentBillingDocumentPatch'][0])
    {
        $this->billingDocumentBillingDocumentPatchWithHttpInfo($billing_document, $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update, $contentType);
    }

    /**
     * Operation billingDocumentBillingDocumentPatchWithHttpInfo
     *
     * Update entity in BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentTypeUpdate $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentBillingDocumentPatchWithHttpInfo($billing_document, $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update, string $contentType = self::contentTypes['billingDocumentBillingDocumentPatch'][0])
    {
        $request = $this->billingDocumentBillingDocumentPatchRequest($billing_document, $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentBillingDocumentPatchAsync
     *
     * Update entity in BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentTypeUpdate $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentBillingDocumentPatchAsync($billing_document, $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update, string $contentType = self::contentTypes['billingDocumentBillingDocumentPatch'][0])
    {
        return $this->billingDocumentBillingDocumentPatchAsyncWithHttpInfo($billing_document, $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentBillingDocumentPatchAsyncWithHttpInfo
     *
     * Update entity in BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentTypeUpdate $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentBillingDocumentPatchAsyncWithHttpInfo($billing_document, $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update, string $contentType = self::contentTypes['billingDocumentBillingDocumentPatch'][0])
    {
        $returnType = '';
        $request = $this->billingDocumentBillingDocumentPatchRequest($billing_document, $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentBillingDocumentPatch'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentTypeUpdate $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentBillingDocumentPatchRequest($billing_document, $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update, string $contentType = self::contentTypes['billingDocumentBillingDocumentPatch'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentBillingDocumentPatch'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling HeaderApi.billingDocumentBillingDocumentPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update' is set
        if ($com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update === null || (is_array($com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update) && count($com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update when calling billingDocumentBillingDocumentPatch'
            );
        }


        $resourcePath = '/BillingDocument/{BillingDocument}\';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_billingdocument_v0001_billing_document_type_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentBillingDocumentSAPSelfPostToAccountingPost
     *
     * Invoke action PostToAccounting
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentSAPSelfPostToAccountingPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function billingDocumentBillingDocumentSAPSelfPostToAccountingPost($billing_document, string $contentType = self::contentTypes['billingDocumentBillingDocumentSAPSelfPostToAccountingPost'][0])
    {
        $this->billingDocumentBillingDocumentSAPSelfPostToAccountingPostWithHttpInfo($billing_document, $contentType);
    }

    /**
     * Operation billingDocumentBillingDocumentSAPSelfPostToAccountingPostWithHttpInfo
     *
     * Invoke action PostToAccounting
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentSAPSelfPostToAccountingPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentBillingDocumentSAPSelfPostToAccountingPostWithHttpInfo($billing_document, string $contentType = self::contentTypes['billingDocumentBillingDocumentSAPSelfPostToAccountingPost'][0])
    {
        $request = $this->billingDocumentBillingDocumentSAPSelfPostToAccountingPostRequest($billing_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentBillingDocumentSAPSelfPostToAccountingPostAsync
     *
     * Invoke action PostToAccounting
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentSAPSelfPostToAccountingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentBillingDocumentSAPSelfPostToAccountingPostAsync($billing_document, string $contentType = self::contentTypes['billingDocumentBillingDocumentSAPSelfPostToAccountingPost'][0])
    {
        return $this->billingDocumentBillingDocumentSAPSelfPostToAccountingPostAsyncWithHttpInfo($billing_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentBillingDocumentSAPSelfPostToAccountingPostAsyncWithHttpInfo
     *
     * Invoke action PostToAccounting
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentSAPSelfPostToAccountingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentBillingDocumentSAPSelfPostToAccountingPostAsyncWithHttpInfo($billing_document, string $contentType = self::contentTypes['billingDocumentBillingDocumentSAPSelfPostToAccountingPost'][0])
    {
        $returnType = '';
        $request = $this->billingDocumentBillingDocumentSAPSelfPostToAccountingPostRequest($billing_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentBillingDocumentSAPSelfPostToAccountingPost'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentBillingDocumentSAPSelfPostToAccountingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentBillingDocumentSAPSelfPostToAccountingPostRequest($billing_document, string $contentType = self::contentTypes['billingDocumentBillingDocumentSAPSelfPostToAccountingPost'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentBillingDocumentSAPSelfPostToAccountingPost'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling HeaderApi.billingDocumentBillingDocumentSAPSelfPostToAccountingPost, must be smaller than or equal to 10.');
        }
        

        $resourcePath = '/BillingDocument/{BillingDocument}/SAP__self.PostToAccounting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentGet
     *
     * Get entities from BillingDocument
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentGet($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentGet'][0])
    {
        list($response) = $this->billingDocumentGetWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentGetWithHttpInfo
     *
     * Get entities from BillingDocument
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentGetWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentGet'][0])
    {
        $request = $this->billingDocumentGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentGetAsync
     *
     * Get entities from BillingDocument
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentGetAsync($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentGet'][0])
    {
        return $this->billingDocumentGetAsyncWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentGetAsyncWithHttpInfo
     *
     * Get entities from BillingDocument
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType';
        $request = $this->billingDocumentGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentGetRequest($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling HeaderApi.billingDocumentGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling HeaderApi.billingDocumentGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/BillingDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet($billing_document, $billing_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'][0])
    {
        list($response) = $this->billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGetWithHttpInfo
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'][0])
    {
        $request = $this->billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGetRequest($billing_document, $billing_document_item, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGetAsync
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGetAsync($billing_document, $billing_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'][0])
    {
        return $this->billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGetAsyncWithHttpInfo
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType';
        $request = $this->billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGetRequest($billing_document, $billing_document_item, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGetRequest($billing_document, $billing_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling HeaderApi.billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'billing_document_item' is set
        if ($billing_document_item === null || (is_array($billing_document_item) && count($billing_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document_item when calling billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet'
            );
        }
        if (strlen($billing_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$billing_document_item" when calling HeaderApi.billingDocumentItemBillingDocumentBillingDocumentItemBillingDocumentGet, must be smaller than or equal to 6.');
        }
        
        
        

        $resourcePath = '/BillingDocumentItem/{BillingDocument}/{BillingDocumentItem}/_BillingDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($billing_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocumentItem' . '}',
                ObjectSerializer::toPathValue($billing_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'][0])
    {
        list($response) = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetWithHttpInfo
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'][0])
    {
        $request = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetRequest($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetAsync
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetAsync($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'][0])
    {
        return $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetAsyncWithHttpInfo
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType';
        $request = $this->billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetRequest($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGetRequest($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling HeaderApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'billing_document_item' is set
        if ($billing_document_item === null || (is_array($billing_document_item) && count($billing_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document_item when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'
            );
        }
        if (strlen($billing_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$billing_document_item" when calling HeaderApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling HeaderApi.billingDocumentItemPartnerBillingDocumentBillingDocumentItemPartnerFunctionBillingDocumentGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/BillingDocumentItemPartner/{BillingDocument}/{BillingDocumentItem}/{PartnerFunction}/_BillingDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($billing_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocumentItem' . '}',
                ObjectSerializer::toPathValue($billing_document_item),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet($billing_document, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'][0])
    {
        list($response) = $this->billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGetWithHttpInfo($billing_document, $partner_function, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGetWithHttpInfo
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGetWithHttpInfo($billing_document, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'][0])
    {
        $request = $this->billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGetRequest($billing_document, $partner_function, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGetAsync
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGetAsync($billing_document, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'][0])
    {
        return $this->billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGetAsyncWithHttpInfo($billing_document, $partner_function, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGetAsyncWithHttpInfo
     *
     * Get related _BillingDocument
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGetAsyncWithHttpInfo($billing_document, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType';
        $request = $this->billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGetRequest($billing_document, $partner_function, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGetRequest($billing_document, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling HeaderApi.billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling HeaderApi.billingDocumentPartnerBillingDocumentPartnerFunctionBillingDocumentGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/BillingDocumentPartner/{BillingDocument}/{PartnerFunction}/_BillingDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingDocumentSAPSelfCreateFromSDDocumentPost
     *
     * Invoke action CreateFromSDDocument
     *
     * @param  \BeLenka\SAP\BillingDocumentODV4\Model\BillingDocumentSAPSelfCreateFromSDDocumentPostRequest $billing_document_sap_self_create_from_sd_document_post_request Action parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentSAPSelfCreateFromSDDocumentPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error
     */
    public function billingDocumentSAPSelfCreateFromSDDocumentPost($billing_document_sap_self_create_from_sd_document_post_request = null, string $contentType = self::contentTypes['billingDocumentSAPSelfCreateFromSDDocumentPost'][0])
    {
        list($response) = $this->billingDocumentSAPSelfCreateFromSDDocumentPostWithHttpInfo($billing_document_sap_self_create_from_sd_document_post_request, $contentType);
        return $response;
    }

    /**
     * Operation billingDocumentSAPSelfCreateFromSDDocumentPostWithHttpInfo
     *
     * Invoke action CreateFromSDDocument
     *
     * @param  \BeLenka\SAP\BillingDocumentODV4\Model\BillingDocumentSAPSelfCreateFromSDDocumentPostRequest $billing_document_sap_self_create_from_sd_document_post_request Action parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentSAPSelfCreateFromSDDocumentPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType|\BeLenka\SAP\BillingDocumentODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingDocumentSAPSelfCreateFromSDDocumentPostWithHttpInfo($billing_document_sap_self_create_from_sd_document_post_request = null, string $contentType = self::contentTypes['billingDocumentSAPSelfCreateFromSDDocumentPost'][0])
    {
        $request = $this->billingDocumentSAPSelfCreateFromSDDocumentPostRequest($billing_document_sap_self_create_from_sd_document_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation billingDocumentSAPSelfCreateFromSDDocumentPostAsync
     *
     * Invoke action CreateFromSDDocument
     *
     * @param  \BeLenka\SAP\BillingDocumentODV4\Model\BillingDocumentSAPSelfCreateFromSDDocumentPostRequest $billing_document_sap_self_create_from_sd_document_post_request Action parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentSAPSelfCreateFromSDDocumentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentSAPSelfCreateFromSDDocumentPostAsync($billing_document_sap_self_create_from_sd_document_post_request = null, string $contentType = self::contentTypes['billingDocumentSAPSelfCreateFromSDDocumentPost'][0])
    {
        return $this->billingDocumentSAPSelfCreateFromSDDocumentPostAsyncWithHttpInfo($billing_document_sap_self_create_from_sd_document_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingDocumentSAPSelfCreateFromSDDocumentPostAsyncWithHttpInfo
     *
     * Invoke action CreateFromSDDocument
     *
     * @param  \BeLenka\SAP\BillingDocumentODV4\Model\BillingDocumentSAPSelfCreateFromSDDocumentPostRequest $billing_document_sap_self_create_from_sd_document_post_request Action parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentSAPSelfCreateFromSDDocumentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingDocumentSAPSelfCreateFromSDDocumentPostAsyncWithHttpInfo($billing_document_sap_self_create_from_sd_document_post_request = null, string $contentType = self::contentTypes['billingDocumentSAPSelfCreateFromSDDocumentPost'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentODV4\Model\CollectionOfBillingDocumentType';
        $request = $this->billingDocumentSAPSelfCreateFromSDDocumentPostRequest($billing_document_sap_self_create_from_sd_document_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingDocumentSAPSelfCreateFromSDDocumentPost'
     *
     * @param  \BeLenka\SAP\BillingDocumentODV4\Model\BillingDocumentSAPSelfCreateFromSDDocumentPostRequest $billing_document_sap_self_create_from_sd_document_post_request Action parameters (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingDocumentSAPSelfCreateFromSDDocumentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingDocumentSAPSelfCreateFromSDDocumentPostRequest($billing_document_sap_self_create_from_sd_document_post_request = null, string $contentType = self::contentTypes['billingDocumentSAPSelfCreateFromSDDocumentPost'][0])
    {



        $resourcePath = '/BillingDocument/SAP__self.CreateFromSDDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($billing_document_sap_self_create_from_sd_document_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($billing_document_sap_self_create_from_sd_document_post_request));
            } else {
                $httpBody = $billing_document_sap_self_create_from_sd_document_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
