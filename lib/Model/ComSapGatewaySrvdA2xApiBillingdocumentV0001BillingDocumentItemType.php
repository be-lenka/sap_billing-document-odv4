<?php
/**
 * ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billing Document
 *
 * Billing documents collectively refer to customer invoices, credit memos, debit memos, pro forma invoices, and the related cancellation documents. This service, which offers both synchronous and asynchronous processing, makes billing document data available through its header, item, and partner entities. You can extend it with custom fields via key user extensibility.      You can use this service to do the following:   - Create billing documents with reference to billable SD documents in your system   - Read most billing document fields at header and item level   - Update specific billing document fields, including custom fields added through extensibility   - Post billing documents to financial accounting to create the corresponding journal entriesÂ 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BillingDocumentODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\BillingDocumentODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_billingdocument.v0001.BillingDocumentItem_Type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billing_document' => 'string',
        'billing_document_item' => 'string',
        'sales_document_item_category' => 'string',
        'sales_document_item_type' => 'string',
        'return_item_processing_type' => 'string',
        'created_by_user' => 'string',
        'creation_date' => '\DateTime',
        'creation_time' => 'string',
        'reference_logical_system' => 'string',
        'organization_division' => 'string',
        'division' => 'string',
        'sales_office' => 'string',
        'product' => 'string',
        'originally_requested_material' => 'string',
        'international_article_number' => 'string',
        'pricing_reference_material' => 'string',
        'batch' => 'string',
        'product_group' => 'string',
        'additional_material_group1' => 'string',
        'additional_material_group2' => 'string',
        'additional_material_group3' => 'string',
        'additional_material_group4' => 'string',
        'additional_material_group5' => 'string',
        'product_configuration' => 'string',
        'plant' => 'string',
        'storage_location' => 'string',
        'plant_region' => 'string',
        'plant_county' => 'string',
        'plant_city' => 'string',
        'material_determination_type' => 'string',
        'sold_product' => 'string',
        'billing_document_item_text' => 'string',
        'services_rendered_date' => '\DateTime',
        'billing_quantity' => '\BeLenka\SAP\BillingDocumentODV4\Model\InvoicedQuantity',
        'billing_quantity_unit_sap_code' => 'string',
        'billing_quantity_unit_iso_code' => 'string',
        'billing_quantity_in_base_unit' => '\BeLenka\SAP\BillingDocumentODV4\Model\BillingQtyInSKU',
        'base_unit_sap_code' => 'string',
        'base_unit_iso_code' => 'string',
        'mrp_required_quantity_in_base_unit' => '\BeLenka\SAP\BillingDocumentODV4\Model\RequiredQuantity',
        'billing_to_base_quantity_dnmntr' => '\BeLenka\SAP\BillingDocumentODV4\Model\Denominator',
        'billing_to_base_quantity_nmrtr' => '\BeLenka\SAP\BillingDocumentODV4\Model\Numerator',
        'item_gross_weight' => '\BeLenka\SAP\BillingDocumentODV4\Model\GrossWeight',
        'item_net_weight' => '\BeLenka\SAP\BillingDocumentODV4\Model\NetWeight',
        'item_weight_unit_sap_code' => 'string',
        'item_weight_unit_iso_code' => 'string',
        'item_volume' => '\BeLenka\SAP\BillingDocumentODV4\Model\Volume',
        'item_volume_unit_sap_code' => 'string',
        'item_volume_unit_iso_code' => 'string',
        'billing_plan_rule' => 'string',
        'billing_plan' => 'string',
        'billing_plan_item' => 'string',
        'net_amount' => '\BeLenka\SAP\BillingDocumentODV4\Model\NetValue1',
        'transaction_currency' => 'string',
        'gross_amount' => '\BeLenka\SAP\BillingDocumentODV4\Model\GrossValue',
        'pricing_date' => '\DateTime',
        'abslt_price_detn_exchange_rate' => '\BeLenka\SAP\BillingDocumentODV4\Model\AbsExchRatePrc',
        'price_detn_exch_rate_is_indrct_qtan' => 'bool',
        'price_detn_exchange_rate_date' => '\DateTime',
        'pricing_scale_quantity_in_base_unit' => '\BeLenka\SAP\BillingDocumentODV4\Model\ScaleQuantity',
        'tax_amount' => '\BeLenka\SAP\BillingDocumentODV4\Model\TaxAmount',
        'cost_amount' => '\BeLenka\SAP\BillingDocumentODV4\Model\Cost',
        'subtotal1_amount' => '\BeLenka\SAP\BillingDocumentODV4\Model\Subtotal1',
        'subtotal2_amount' => '\BeLenka\SAP\BillingDocumentODV4\Model\Subtotal2',
        'subtotal3_amount' => '\BeLenka\SAP\BillingDocumentODV4\Model\Subtotal3',
        'subtotal4_amount' => '\BeLenka\SAP\BillingDocumentODV4\Model\Subtotal4',
        'subtotal5_amount' => '\BeLenka\SAP\BillingDocumentODV4\Model\Subtotal5',
        'subtotal6_amount' => '\BeLenka\SAP\BillingDocumentODV4\Model\Subtotal6',
        'statistical_value_control' => 'string',
        'cash_discount_is_deductible' => 'bool',
        'customer_condition_group1' => 'string',
        'customer_condition_group2' => 'string',
        'customer_condition_group3' => 'string',
        'customer_condition_group4' => 'string',
        'customer_condition_group5' => 'string',
        'manual_price_change_type' => 'string',
        'material_pricing_group' => 'string',
        'abslt_statistics_exchange_rate' => '\BeLenka\SAP\BillingDocumentODV4\Model\AbsExchRateStats',
        'statistics_exch_rate_is_indrct_qtan' => 'bool',
        'main_item_pricing_ref_material' => 'string',
        'main_item_material_pricing_group' => 'string',
        'time_sheet_overtime_category' => 'string',
        'departure_country' => 'string',
        'tax_jurisdiction' => 'string',
        'product_tax_classification1' => 'string',
        'product_tax_classification2' => 'string',
        'product_tax_classification3' => 'string',
        'product_tax_classification4' => 'string',
        'product_tax_classification5' => 'string',
        'product_tax_classification6' => 'string',
        'product_tax_classification7' => 'string',
        'product_tax_classification8' => 'string',
        'product_tax_classification9' => 'string',
        'tax_code' => 'string',
        'tax_rate_validity_start_date' => '\DateTime',
        'eligible_amount_for_cash_discount' => '\BeLenka\SAP\BillingDocumentODV4\Model\CashDiscBas',
        'business_area' => 'string',
        'profit_center' => 'string',
        'wbs_element_external_id' => 'string',
        'provider_contract' => 'string',
        'provider_contract_item' => 'string',
        'billing_period_of_perf_start_date' => '\DateTime',
        'billing_period_of_perf_end_date' => '\DateTime',
        'controlling_area' => 'string',
        'cost_center' => 'string',
        'matl_account_assignment_group' => 'string',
        'reference_sd_document' => 'string',
        'reference_sd_document_item' => 'string',
        'reference_sd_document_category' => 'string',
        'sales_document' => 'string',
        'sales_document_item' => 'string',
        'sales_sd_document_category' => 'string',
        'higher_level_item' => 'string',
        'billing_document_item_in_part_sgmt' => 'string',
        'sales_group' => 'string',
        'additional_customer_group1' => 'string',
        'additional_customer_group2' => 'string',
        'additional_customer_group3' => 'string',
        'additional_customer_group4' => 'string',
        'additional_customer_group5' => 'string',
        'sd_document_reason' => 'string',
        'item_is_relevant_for_credit' => 'bool',
        'credit_related_price' => '\BeLenka\SAP\BillingDocumentODV4\Model\CreditPrice',
        'shipping_point' => 'string',
        'service_document_type' => 'string',
        'service_document' => 'string',
        'service_document_item' => 'string',
        'business_solution_order' => 'string',
        'business_solution_order_item' => 'string',
        'higher_level_item_usage' => 'string',
        'sap__messages' => '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001SAPMessage[]',
        '_billing_document' => '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType',
        '_item_partner' => '\BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemPartnerType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billing_document' => null,
        'billing_document_item' => null,
        'sales_document_item_category' => null,
        'sales_document_item_type' => null,
        'return_item_processing_type' => null,
        'created_by_user' => null,
        'creation_date' => 'date',
        'creation_time' => 'time',
        'reference_logical_system' => null,
        'organization_division' => null,
        'division' => null,
        'sales_office' => null,
        'product' => null,
        'originally_requested_material' => null,
        'international_article_number' => null,
        'pricing_reference_material' => null,
        'batch' => null,
        'product_group' => null,
        'additional_material_group1' => null,
        'additional_material_group2' => null,
        'additional_material_group3' => null,
        'additional_material_group4' => null,
        'additional_material_group5' => null,
        'product_configuration' => null,
        'plant' => null,
        'storage_location' => null,
        'plant_region' => null,
        'plant_county' => null,
        'plant_city' => null,
        'material_determination_type' => null,
        'sold_product' => null,
        'billing_document_item_text' => null,
        'services_rendered_date' => 'date',
        'billing_quantity' => null,
        'billing_quantity_unit_sap_code' => null,
        'billing_quantity_unit_iso_code' => null,
        'billing_quantity_in_base_unit' => null,
        'base_unit_sap_code' => null,
        'base_unit_iso_code' => null,
        'mrp_required_quantity_in_base_unit' => null,
        'billing_to_base_quantity_dnmntr' => null,
        'billing_to_base_quantity_nmrtr' => null,
        'item_gross_weight' => null,
        'item_net_weight' => null,
        'item_weight_unit_sap_code' => null,
        'item_weight_unit_iso_code' => null,
        'item_volume' => null,
        'item_volume_unit_sap_code' => null,
        'item_volume_unit_iso_code' => null,
        'billing_plan_rule' => null,
        'billing_plan' => null,
        'billing_plan_item' => null,
        'net_amount' => null,
        'transaction_currency' => null,
        'gross_amount' => null,
        'pricing_date' => 'date',
        'abslt_price_detn_exchange_rate' => null,
        'price_detn_exch_rate_is_indrct_qtan' => null,
        'price_detn_exchange_rate_date' => 'date',
        'pricing_scale_quantity_in_base_unit' => null,
        'tax_amount' => null,
        'cost_amount' => null,
        'subtotal1_amount' => null,
        'subtotal2_amount' => null,
        'subtotal3_amount' => null,
        'subtotal4_amount' => null,
        'subtotal5_amount' => null,
        'subtotal6_amount' => null,
        'statistical_value_control' => null,
        'cash_discount_is_deductible' => null,
        'customer_condition_group1' => null,
        'customer_condition_group2' => null,
        'customer_condition_group3' => null,
        'customer_condition_group4' => null,
        'customer_condition_group5' => null,
        'manual_price_change_type' => null,
        'material_pricing_group' => null,
        'abslt_statistics_exchange_rate' => null,
        'statistics_exch_rate_is_indrct_qtan' => null,
        'main_item_pricing_ref_material' => null,
        'main_item_material_pricing_group' => null,
        'time_sheet_overtime_category' => null,
        'departure_country' => null,
        'tax_jurisdiction' => null,
        'product_tax_classification1' => null,
        'product_tax_classification2' => null,
        'product_tax_classification3' => null,
        'product_tax_classification4' => null,
        'product_tax_classification5' => null,
        'product_tax_classification6' => null,
        'product_tax_classification7' => null,
        'product_tax_classification8' => null,
        'product_tax_classification9' => null,
        'tax_code' => null,
        'tax_rate_validity_start_date' => 'date',
        'eligible_amount_for_cash_discount' => null,
        'business_area' => null,
        'profit_center' => null,
        'wbs_element_external_id' => null,
        'provider_contract' => null,
        'provider_contract_item' => null,
        'billing_period_of_perf_start_date' => 'date',
        'billing_period_of_perf_end_date' => 'date',
        'controlling_area' => null,
        'cost_center' => null,
        'matl_account_assignment_group' => null,
        'reference_sd_document' => null,
        'reference_sd_document_item' => null,
        'reference_sd_document_category' => null,
        'sales_document' => null,
        'sales_document_item' => null,
        'sales_sd_document_category' => null,
        'higher_level_item' => null,
        'billing_document_item_in_part_sgmt' => null,
        'sales_group' => null,
        'additional_customer_group1' => null,
        'additional_customer_group2' => null,
        'additional_customer_group3' => null,
        'additional_customer_group4' => null,
        'additional_customer_group5' => null,
        'sd_document_reason' => null,
        'item_is_relevant_for_credit' => null,
        'credit_related_price' => null,
        'shipping_point' => null,
        'service_document_type' => null,
        'service_document' => null,
        'service_document_item' => null,
        'business_solution_order' => null,
        'business_solution_order_item' => null,
        'higher_level_item_usage' => null,
        'sap__messages' => null,
        '_billing_document' => null,
        '_item_partner' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'billing_document' => false,
		'billing_document_item' => false,
		'sales_document_item_category' => false,
		'sales_document_item_type' => false,
		'return_item_processing_type' => false,
		'created_by_user' => false,
		'creation_date' => true,
		'creation_time' => false,
		'reference_logical_system' => false,
		'organization_division' => false,
		'division' => false,
		'sales_office' => false,
		'product' => false,
		'originally_requested_material' => false,
		'international_article_number' => false,
		'pricing_reference_material' => false,
		'batch' => false,
		'product_group' => false,
		'additional_material_group1' => false,
		'additional_material_group2' => false,
		'additional_material_group3' => false,
		'additional_material_group4' => false,
		'additional_material_group5' => false,
		'product_configuration' => false,
		'plant' => false,
		'storage_location' => false,
		'plant_region' => false,
		'plant_county' => false,
		'plant_city' => false,
		'material_determination_type' => false,
		'sold_product' => false,
		'billing_document_item_text' => false,
		'services_rendered_date' => true,
		'billing_quantity' => false,
		'billing_quantity_unit_sap_code' => false,
		'billing_quantity_unit_iso_code' => false,
		'billing_quantity_in_base_unit' => false,
		'base_unit_sap_code' => false,
		'base_unit_iso_code' => false,
		'mrp_required_quantity_in_base_unit' => false,
		'billing_to_base_quantity_dnmntr' => false,
		'billing_to_base_quantity_nmrtr' => false,
		'item_gross_weight' => false,
		'item_net_weight' => false,
		'item_weight_unit_sap_code' => false,
		'item_weight_unit_iso_code' => false,
		'item_volume' => false,
		'item_volume_unit_sap_code' => false,
		'item_volume_unit_iso_code' => false,
		'billing_plan_rule' => false,
		'billing_plan' => false,
		'billing_plan_item' => false,
		'net_amount' => false,
		'transaction_currency' => false,
		'gross_amount' => false,
		'pricing_date' => true,
		'abslt_price_detn_exchange_rate' => false,
		'price_detn_exch_rate_is_indrct_qtan' => false,
		'price_detn_exchange_rate_date' => true,
		'pricing_scale_quantity_in_base_unit' => false,
		'tax_amount' => false,
		'cost_amount' => false,
		'subtotal1_amount' => false,
		'subtotal2_amount' => false,
		'subtotal3_amount' => false,
		'subtotal4_amount' => false,
		'subtotal5_amount' => false,
		'subtotal6_amount' => false,
		'statistical_value_control' => false,
		'cash_discount_is_deductible' => false,
		'customer_condition_group1' => false,
		'customer_condition_group2' => false,
		'customer_condition_group3' => false,
		'customer_condition_group4' => false,
		'customer_condition_group5' => false,
		'manual_price_change_type' => false,
		'material_pricing_group' => false,
		'abslt_statistics_exchange_rate' => false,
		'statistics_exch_rate_is_indrct_qtan' => false,
		'main_item_pricing_ref_material' => false,
		'main_item_material_pricing_group' => false,
		'time_sheet_overtime_category' => false,
		'departure_country' => false,
		'tax_jurisdiction' => false,
		'product_tax_classification1' => false,
		'product_tax_classification2' => false,
		'product_tax_classification3' => false,
		'product_tax_classification4' => false,
		'product_tax_classification5' => false,
		'product_tax_classification6' => false,
		'product_tax_classification7' => false,
		'product_tax_classification8' => false,
		'product_tax_classification9' => false,
		'tax_code' => false,
		'tax_rate_validity_start_date' => true,
		'eligible_amount_for_cash_discount' => false,
		'business_area' => false,
		'profit_center' => false,
		'wbs_element_external_id' => false,
		'provider_contract' => false,
		'provider_contract_item' => false,
		'billing_period_of_perf_start_date' => true,
		'billing_period_of_perf_end_date' => true,
		'controlling_area' => false,
		'cost_center' => false,
		'matl_account_assignment_group' => false,
		'reference_sd_document' => false,
		'reference_sd_document_item' => false,
		'reference_sd_document_category' => false,
		'sales_document' => false,
		'sales_document_item' => false,
		'sales_sd_document_category' => false,
		'higher_level_item' => true,
		'billing_document_item_in_part_sgmt' => false,
		'sales_group' => false,
		'additional_customer_group1' => false,
		'additional_customer_group2' => false,
		'additional_customer_group3' => false,
		'additional_customer_group4' => false,
		'additional_customer_group5' => false,
		'sd_document_reason' => false,
		'item_is_relevant_for_credit' => false,
		'credit_related_price' => false,
		'shipping_point' => false,
		'service_document_type' => false,
		'service_document' => false,
		'service_document_item' => false,
		'business_solution_order' => false,
		'business_solution_order_item' => false,
		'higher_level_item_usage' => false,
		'sap__messages' => false,
		'_billing_document' => false,
		'_item_partner' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_document' => 'BillingDocument',
        'billing_document_item' => 'BillingDocumentItem',
        'sales_document_item_category' => 'SalesDocumentItemCategory',
        'sales_document_item_type' => 'SalesDocumentItemType',
        'return_item_processing_type' => 'ReturnItemProcessingType',
        'created_by_user' => 'CreatedByUser',
        'creation_date' => 'CreationDate',
        'creation_time' => 'CreationTime',
        'reference_logical_system' => 'ReferenceLogicalSystem',
        'organization_division' => 'OrganizationDivision',
        'division' => 'Division',
        'sales_office' => 'SalesOffice',
        'product' => 'Product',
        'originally_requested_material' => 'OriginallyRequestedMaterial',
        'international_article_number' => 'InternationalArticleNumber',
        'pricing_reference_material' => 'PricingReferenceMaterial',
        'batch' => 'Batch',
        'product_group' => 'ProductGroup',
        'additional_material_group1' => 'AdditionalMaterialGroup1',
        'additional_material_group2' => 'AdditionalMaterialGroup2',
        'additional_material_group3' => 'AdditionalMaterialGroup3',
        'additional_material_group4' => 'AdditionalMaterialGroup4',
        'additional_material_group5' => 'AdditionalMaterialGroup5',
        'product_configuration' => 'ProductConfiguration',
        'plant' => 'Plant',
        'storage_location' => 'StorageLocation',
        'plant_region' => 'PlantRegion',
        'plant_county' => 'PlantCounty',
        'plant_city' => 'PlantCity',
        'material_determination_type' => 'MaterialDeterminationType',
        'sold_product' => 'SoldProduct',
        'billing_document_item_text' => 'BillingDocumentItemText',
        'services_rendered_date' => 'ServicesRenderedDate',
        'billing_quantity' => 'BillingQuantity',
        'billing_quantity_unit_sap_code' => 'BillingQuantityUnitSAPCode',
        'billing_quantity_unit_iso_code' => 'BillingQuantityUnitISOCode',
        'billing_quantity_in_base_unit' => 'BillingQuantityInBaseUnit',
        'base_unit_sap_code' => 'BaseUnitSAPCode',
        'base_unit_iso_code' => 'BaseUnitISOCode',
        'mrp_required_quantity_in_base_unit' => 'MRPRequiredQuantityInBaseUnit',
        'billing_to_base_quantity_dnmntr' => 'BillingToBaseQuantityDnmntr',
        'billing_to_base_quantity_nmrtr' => 'BillingToBaseQuantityNmrtr',
        'item_gross_weight' => 'ItemGrossWeight',
        'item_net_weight' => 'ItemNetWeight',
        'item_weight_unit_sap_code' => 'ItemWeightUnitSAPCode',
        'item_weight_unit_iso_code' => 'ItemWeightUnitISOCode',
        'item_volume' => 'ItemVolume',
        'item_volume_unit_sap_code' => 'ItemVolumeUnitSAPCode',
        'item_volume_unit_iso_code' => 'ItemVolumeUnitISOCode',
        'billing_plan_rule' => 'BillingPlanRule',
        'billing_plan' => 'BillingPlan',
        'billing_plan_item' => 'BillingPlanItem',
        'net_amount' => 'NetAmount',
        'transaction_currency' => 'TransactionCurrency',
        'gross_amount' => 'GrossAmount',
        'pricing_date' => 'PricingDate',
        'abslt_price_detn_exchange_rate' => 'AbsltPriceDetnExchangeRate',
        'price_detn_exch_rate_is_indrct_qtan' => 'PriceDetnExchRateIsIndrctQtan',
        'price_detn_exchange_rate_date' => 'PriceDetnExchangeRateDate',
        'pricing_scale_quantity_in_base_unit' => 'PricingScaleQuantityInBaseUnit',
        'tax_amount' => 'TaxAmount',
        'cost_amount' => 'CostAmount',
        'subtotal1_amount' => 'Subtotal1Amount',
        'subtotal2_amount' => 'Subtotal2Amount',
        'subtotal3_amount' => 'Subtotal3Amount',
        'subtotal4_amount' => 'Subtotal4Amount',
        'subtotal5_amount' => 'Subtotal5Amount',
        'subtotal6_amount' => 'Subtotal6Amount',
        'statistical_value_control' => 'StatisticalValueControl',
        'cash_discount_is_deductible' => 'CashDiscountIsDeductible',
        'customer_condition_group1' => 'CustomerConditionGroup1',
        'customer_condition_group2' => 'CustomerConditionGroup2',
        'customer_condition_group3' => 'CustomerConditionGroup3',
        'customer_condition_group4' => 'CustomerConditionGroup4',
        'customer_condition_group5' => 'CustomerConditionGroup5',
        'manual_price_change_type' => 'ManualPriceChangeType',
        'material_pricing_group' => 'MaterialPricingGroup',
        'abslt_statistics_exchange_rate' => 'AbsltStatisticsExchangeRate',
        'statistics_exch_rate_is_indrct_qtan' => 'StatisticsExchRateIsIndrctQtan',
        'main_item_pricing_ref_material' => 'MainItemPricingRefMaterial',
        'main_item_material_pricing_group' => 'MainItemMaterialPricingGroup',
        'time_sheet_overtime_category' => 'TimeSheetOvertimeCategory',
        'departure_country' => 'DepartureCountry',
        'tax_jurisdiction' => 'TaxJurisdiction',
        'product_tax_classification1' => 'ProductTaxClassification1',
        'product_tax_classification2' => 'ProductTaxClassification2',
        'product_tax_classification3' => 'ProductTaxClassification3',
        'product_tax_classification4' => 'ProductTaxClassification4',
        'product_tax_classification5' => 'ProductTaxClassification5',
        'product_tax_classification6' => 'ProductTaxClassification6',
        'product_tax_classification7' => 'ProductTaxClassification7',
        'product_tax_classification8' => 'ProductTaxClassification8',
        'product_tax_classification9' => 'ProductTaxClassification9',
        'tax_code' => 'TaxCode',
        'tax_rate_validity_start_date' => 'TaxRateValidityStartDate',
        'eligible_amount_for_cash_discount' => 'EligibleAmountForCashDiscount',
        'business_area' => 'BusinessArea',
        'profit_center' => 'ProfitCenter',
        'wbs_element_external_id' => 'WBSElementExternalID',
        'provider_contract' => 'ProviderContract',
        'provider_contract_item' => 'ProviderContractItem',
        'billing_period_of_perf_start_date' => 'BillingPeriodOfPerfStartDate',
        'billing_period_of_perf_end_date' => 'BillingPeriodOfPerfEndDate',
        'controlling_area' => 'ControllingArea',
        'cost_center' => 'CostCenter',
        'matl_account_assignment_group' => 'MatlAccountAssignmentGroup',
        'reference_sd_document' => 'ReferenceSDDocument',
        'reference_sd_document_item' => 'ReferenceSDDocumentItem',
        'reference_sd_document_category' => 'ReferenceSDDocumentCategory',
        'sales_document' => 'SalesDocument',
        'sales_document_item' => 'SalesDocumentItem',
        'sales_sd_document_category' => 'SalesSDDocumentCategory',
        'higher_level_item' => 'HigherLevelItem',
        'billing_document_item_in_part_sgmt' => 'BillingDocumentItemInPartSgmt',
        'sales_group' => 'SalesGroup',
        'additional_customer_group1' => 'AdditionalCustomerGroup1',
        'additional_customer_group2' => 'AdditionalCustomerGroup2',
        'additional_customer_group3' => 'AdditionalCustomerGroup3',
        'additional_customer_group4' => 'AdditionalCustomerGroup4',
        'additional_customer_group5' => 'AdditionalCustomerGroup5',
        'sd_document_reason' => 'SDDocumentReason',
        'item_is_relevant_for_credit' => 'ItemIsRelevantForCredit',
        'credit_related_price' => 'CreditRelatedPrice',
        'shipping_point' => 'ShippingPoint',
        'service_document_type' => 'ServiceDocumentType',
        'service_document' => 'ServiceDocument',
        'service_document_item' => 'ServiceDocumentItem',
        'business_solution_order' => 'BusinessSolutionOrder',
        'business_solution_order_item' => 'BusinessSolutionOrderItem',
        'higher_level_item_usage' => 'HigherLevelItemUsage',
        'sap__messages' => 'SAP__Messages',
        '_billing_document' => '_BillingDocument',
        '_item_partner' => '_ItemPartner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_document' => 'setBillingDocument',
        'billing_document_item' => 'setBillingDocumentItem',
        'sales_document_item_category' => 'setSalesDocumentItemCategory',
        'sales_document_item_type' => 'setSalesDocumentItemType',
        'return_item_processing_type' => 'setReturnItemProcessingType',
        'created_by_user' => 'setCreatedByUser',
        'creation_date' => 'setCreationDate',
        'creation_time' => 'setCreationTime',
        'reference_logical_system' => 'setReferenceLogicalSystem',
        'organization_division' => 'setOrganizationDivision',
        'division' => 'setDivision',
        'sales_office' => 'setSalesOffice',
        'product' => 'setProduct',
        'originally_requested_material' => 'setOriginallyRequestedMaterial',
        'international_article_number' => 'setInternationalArticleNumber',
        'pricing_reference_material' => 'setPricingReferenceMaterial',
        'batch' => 'setBatch',
        'product_group' => 'setProductGroup',
        'additional_material_group1' => 'setAdditionalMaterialGroup1',
        'additional_material_group2' => 'setAdditionalMaterialGroup2',
        'additional_material_group3' => 'setAdditionalMaterialGroup3',
        'additional_material_group4' => 'setAdditionalMaterialGroup4',
        'additional_material_group5' => 'setAdditionalMaterialGroup5',
        'product_configuration' => 'setProductConfiguration',
        'plant' => 'setPlant',
        'storage_location' => 'setStorageLocation',
        'plant_region' => 'setPlantRegion',
        'plant_county' => 'setPlantCounty',
        'plant_city' => 'setPlantCity',
        'material_determination_type' => 'setMaterialDeterminationType',
        'sold_product' => 'setSoldProduct',
        'billing_document_item_text' => 'setBillingDocumentItemText',
        'services_rendered_date' => 'setServicesRenderedDate',
        'billing_quantity' => 'setBillingQuantity',
        'billing_quantity_unit_sap_code' => 'setBillingQuantityUnitSapCode',
        'billing_quantity_unit_iso_code' => 'setBillingQuantityUnitIsoCode',
        'billing_quantity_in_base_unit' => 'setBillingQuantityInBaseUnit',
        'base_unit_sap_code' => 'setBaseUnitSapCode',
        'base_unit_iso_code' => 'setBaseUnitIsoCode',
        'mrp_required_quantity_in_base_unit' => 'setMrpRequiredQuantityInBaseUnit',
        'billing_to_base_quantity_dnmntr' => 'setBillingToBaseQuantityDnmntr',
        'billing_to_base_quantity_nmrtr' => 'setBillingToBaseQuantityNmrtr',
        'item_gross_weight' => 'setItemGrossWeight',
        'item_net_weight' => 'setItemNetWeight',
        'item_weight_unit_sap_code' => 'setItemWeightUnitSapCode',
        'item_weight_unit_iso_code' => 'setItemWeightUnitIsoCode',
        'item_volume' => 'setItemVolume',
        'item_volume_unit_sap_code' => 'setItemVolumeUnitSapCode',
        'item_volume_unit_iso_code' => 'setItemVolumeUnitIsoCode',
        'billing_plan_rule' => 'setBillingPlanRule',
        'billing_plan' => 'setBillingPlan',
        'billing_plan_item' => 'setBillingPlanItem',
        'net_amount' => 'setNetAmount',
        'transaction_currency' => 'setTransactionCurrency',
        'gross_amount' => 'setGrossAmount',
        'pricing_date' => 'setPricingDate',
        'abslt_price_detn_exchange_rate' => 'setAbsltPriceDetnExchangeRate',
        'price_detn_exch_rate_is_indrct_qtan' => 'setPriceDetnExchRateIsIndrctQtan',
        'price_detn_exchange_rate_date' => 'setPriceDetnExchangeRateDate',
        'pricing_scale_quantity_in_base_unit' => 'setPricingScaleQuantityInBaseUnit',
        'tax_amount' => 'setTaxAmount',
        'cost_amount' => 'setCostAmount',
        'subtotal1_amount' => 'setSubtotal1Amount',
        'subtotal2_amount' => 'setSubtotal2Amount',
        'subtotal3_amount' => 'setSubtotal3Amount',
        'subtotal4_amount' => 'setSubtotal4Amount',
        'subtotal5_amount' => 'setSubtotal5Amount',
        'subtotal6_amount' => 'setSubtotal6Amount',
        'statistical_value_control' => 'setStatisticalValueControl',
        'cash_discount_is_deductible' => 'setCashDiscountIsDeductible',
        'customer_condition_group1' => 'setCustomerConditionGroup1',
        'customer_condition_group2' => 'setCustomerConditionGroup2',
        'customer_condition_group3' => 'setCustomerConditionGroup3',
        'customer_condition_group4' => 'setCustomerConditionGroup4',
        'customer_condition_group5' => 'setCustomerConditionGroup5',
        'manual_price_change_type' => 'setManualPriceChangeType',
        'material_pricing_group' => 'setMaterialPricingGroup',
        'abslt_statistics_exchange_rate' => 'setAbsltStatisticsExchangeRate',
        'statistics_exch_rate_is_indrct_qtan' => 'setStatisticsExchRateIsIndrctQtan',
        'main_item_pricing_ref_material' => 'setMainItemPricingRefMaterial',
        'main_item_material_pricing_group' => 'setMainItemMaterialPricingGroup',
        'time_sheet_overtime_category' => 'setTimeSheetOvertimeCategory',
        'departure_country' => 'setDepartureCountry',
        'tax_jurisdiction' => 'setTaxJurisdiction',
        'product_tax_classification1' => 'setProductTaxClassification1',
        'product_tax_classification2' => 'setProductTaxClassification2',
        'product_tax_classification3' => 'setProductTaxClassification3',
        'product_tax_classification4' => 'setProductTaxClassification4',
        'product_tax_classification5' => 'setProductTaxClassification5',
        'product_tax_classification6' => 'setProductTaxClassification6',
        'product_tax_classification7' => 'setProductTaxClassification7',
        'product_tax_classification8' => 'setProductTaxClassification8',
        'product_tax_classification9' => 'setProductTaxClassification9',
        'tax_code' => 'setTaxCode',
        'tax_rate_validity_start_date' => 'setTaxRateValidityStartDate',
        'eligible_amount_for_cash_discount' => 'setEligibleAmountForCashDiscount',
        'business_area' => 'setBusinessArea',
        'profit_center' => 'setProfitCenter',
        'wbs_element_external_id' => 'setWbsElementExternalId',
        'provider_contract' => 'setProviderContract',
        'provider_contract_item' => 'setProviderContractItem',
        'billing_period_of_perf_start_date' => 'setBillingPeriodOfPerfStartDate',
        'billing_period_of_perf_end_date' => 'setBillingPeriodOfPerfEndDate',
        'controlling_area' => 'setControllingArea',
        'cost_center' => 'setCostCenter',
        'matl_account_assignment_group' => 'setMatlAccountAssignmentGroup',
        'reference_sd_document' => 'setReferenceSdDocument',
        'reference_sd_document_item' => 'setReferenceSdDocumentItem',
        'reference_sd_document_category' => 'setReferenceSdDocumentCategory',
        'sales_document' => 'setSalesDocument',
        'sales_document_item' => 'setSalesDocumentItem',
        'sales_sd_document_category' => 'setSalesSdDocumentCategory',
        'higher_level_item' => 'setHigherLevelItem',
        'billing_document_item_in_part_sgmt' => 'setBillingDocumentItemInPartSgmt',
        'sales_group' => 'setSalesGroup',
        'additional_customer_group1' => 'setAdditionalCustomerGroup1',
        'additional_customer_group2' => 'setAdditionalCustomerGroup2',
        'additional_customer_group3' => 'setAdditionalCustomerGroup3',
        'additional_customer_group4' => 'setAdditionalCustomerGroup4',
        'additional_customer_group5' => 'setAdditionalCustomerGroup5',
        'sd_document_reason' => 'setSdDocumentReason',
        'item_is_relevant_for_credit' => 'setItemIsRelevantForCredit',
        'credit_related_price' => 'setCreditRelatedPrice',
        'shipping_point' => 'setShippingPoint',
        'service_document_type' => 'setServiceDocumentType',
        'service_document' => 'setServiceDocument',
        'service_document_item' => 'setServiceDocumentItem',
        'business_solution_order' => 'setBusinessSolutionOrder',
        'business_solution_order_item' => 'setBusinessSolutionOrderItem',
        'higher_level_item_usage' => 'setHigherLevelItemUsage',
        'sap__messages' => 'setSapMessages',
        '_billing_document' => 'setBillingDocument',
        '_item_partner' => 'setItemPartner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_document' => 'getBillingDocument',
        'billing_document_item' => 'getBillingDocumentItem',
        'sales_document_item_category' => 'getSalesDocumentItemCategory',
        'sales_document_item_type' => 'getSalesDocumentItemType',
        'return_item_processing_type' => 'getReturnItemProcessingType',
        'created_by_user' => 'getCreatedByUser',
        'creation_date' => 'getCreationDate',
        'creation_time' => 'getCreationTime',
        'reference_logical_system' => 'getReferenceLogicalSystem',
        'organization_division' => 'getOrganizationDivision',
        'division' => 'getDivision',
        'sales_office' => 'getSalesOffice',
        'product' => 'getProduct',
        'originally_requested_material' => 'getOriginallyRequestedMaterial',
        'international_article_number' => 'getInternationalArticleNumber',
        'pricing_reference_material' => 'getPricingReferenceMaterial',
        'batch' => 'getBatch',
        'product_group' => 'getProductGroup',
        'additional_material_group1' => 'getAdditionalMaterialGroup1',
        'additional_material_group2' => 'getAdditionalMaterialGroup2',
        'additional_material_group3' => 'getAdditionalMaterialGroup3',
        'additional_material_group4' => 'getAdditionalMaterialGroup4',
        'additional_material_group5' => 'getAdditionalMaterialGroup5',
        'product_configuration' => 'getProductConfiguration',
        'plant' => 'getPlant',
        'storage_location' => 'getStorageLocation',
        'plant_region' => 'getPlantRegion',
        'plant_county' => 'getPlantCounty',
        'plant_city' => 'getPlantCity',
        'material_determination_type' => 'getMaterialDeterminationType',
        'sold_product' => 'getSoldProduct',
        'billing_document_item_text' => 'getBillingDocumentItemText',
        'services_rendered_date' => 'getServicesRenderedDate',
        'billing_quantity' => 'getBillingQuantity',
        'billing_quantity_unit_sap_code' => 'getBillingQuantityUnitSapCode',
        'billing_quantity_unit_iso_code' => 'getBillingQuantityUnitIsoCode',
        'billing_quantity_in_base_unit' => 'getBillingQuantityInBaseUnit',
        'base_unit_sap_code' => 'getBaseUnitSapCode',
        'base_unit_iso_code' => 'getBaseUnitIsoCode',
        'mrp_required_quantity_in_base_unit' => 'getMrpRequiredQuantityInBaseUnit',
        'billing_to_base_quantity_dnmntr' => 'getBillingToBaseQuantityDnmntr',
        'billing_to_base_quantity_nmrtr' => 'getBillingToBaseQuantityNmrtr',
        'item_gross_weight' => 'getItemGrossWeight',
        'item_net_weight' => 'getItemNetWeight',
        'item_weight_unit_sap_code' => 'getItemWeightUnitSapCode',
        'item_weight_unit_iso_code' => 'getItemWeightUnitIsoCode',
        'item_volume' => 'getItemVolume',
        'item_volume_unit_sap_code' => 'getItemVolumeUnitSapCode',
        'item_volume_unit_iso_code' => 'getItemVolumeUnitIsoCode',
        'billing_plan_rule' => 'getBillingPlanRule',
        'billing_plan' => 'getBillingPlan',
        'billing_plan_item' => 'getBillingPlanItem',
        'net_amount' => 'getNetAmount',
        'transaction_currency' => 'getTransactionCurrency',
        'gross_amount' => 'getGrossAmount',
        'pricing_date' => 'getPricingDate',
        'abslt_price_detn_exchange_rate' => 'getAbsltPriceDetnExchangeRate',
        'price_detn_exch_rate_is_indrct_qtan' => 'getPriceDetnExchRateIsIndrctQtan',
        'price_detn_exchange_rate_date' => 'getPriceDetnExchangeRateDate',
        'pricing_scale_quantity_in_base_unit' => 'getPricingScaleQuantityInBaseUnit',
        'tax_amount' => 'getTaxAmount',
        'cost_amount' => 'getCostAmount',
        'subtotal1_amount' => 'getSubtotal1Amount',
        'subtotal2_amount' => 'getSubtotal2Amount',
        'subtotal3_amount' => 'getSubtotal3Amount',
        'subtotal4_amount' => 'getSubtotal4Amount',
        'subtotal5_amount' => 'getSubtotal5Amount',
        'subtotal6_amount' => 'getSubtotal6Amount',
        'statistical_value_control' => 'getStatisticalValueControl',
        'cash_discount_is_deductible' => 'getCashDiscountIsDeductible',
        'customer_condition_group1' => 'getCustomerConditionGroup1',
        'customer_condition_group2' => 'getCustomerConditionGroup2',
        'customer_condition_group3' => 'getCustomerConditionGroup3',
        'customer_condition_group4' => 'getCustomerConditionGroup4',
        'customer_condition_group5' => 'getCustomerConditionGroup5',
        'manual_price_change_type' => 'getManualPriceChangeType',
        'material_pricing_group' => 'getMaterialPricingGroup',
        'abslt_statistics_exchange_rate' => 'getAbsltStatisticsExchangeRate',
        'statistics_exch_rate_is_indrct_qtan' => 'getStatisticsExchRateIsIndrctQtan',
        'main_item_pricing_ref_material' => 'getMainItemPricingRefMaterial',
        'main_item_material_pricing_group' => 'getMainItemMaterialPricingGroup',
        'time_sheet_overtime_category' => 'getTimeSheetOvertimeCategory',
        'departure_country' => 'getDepartureCountry',
        'tax_jurisdiction' => 'getTaxJurisdiction',
        'product_tax_classification1' => 'getProductTaxClassification1',
        'product_tax_classification2' => 'getProductTaxClassification2',
        'product_tax_classification3' => 'getProductTaxClassification3',
        'product_tax_classification4' => 'getProductTaxClassification4',
        'product_tax_classification5' => 'getProductTaxClassification5',
        'product_tax_classification6' => 'getProductTaxClassification6',
        'product_tax_classification7' => 'getProductTaxClassification7',
        'product_tax_classification8' => 'getProductTaxClassification8',
        'product_tax_classification9' => 'getProductTaxClassification9',
        'tax_code' => 'getTaxCode',
        'tax_rate_validity_start_date' => 'getTaxRateValidityStartDate',
        'eligible_amount_for_cash_discount' => 'getEligibleAmountForCashDiscount',
        'business_area' => 'getBusinessArea',
        'profit_center' => 'getProfitCenter',
        'wbs_element_external_id' => 'getWbsElementExternalId',
        'provider_contract' => 'getProviderContract',
        'provider_contract_item' => 'getProviderContractItem',
        'billing_period_of_perf_start_date' => 'getBillingPeriodOfPerfStartDate',
        'billing_period_of_perf_end_date' => 'getBillingPeriodOfPerfEndDate',
        'controlling_area' => 'getControllingArea',
        'cost_center' => 'getCostCenter',
        'matl_account_assignment_group' => 'getMatlAccountAssignmentGroup',
        'reference_sd_document' => 'getReferenceSdDocument',
        'reference_sd_document_item' => 'getReferenceSdDocumentItem',
        'reference_sd_document_category' => 'getReferenceSdDocumentCategory',
        'sales_document' => 'getSalesDocument',
        'sales_document_item' => 'getSalesDocumentItem',
        'sales_sd_document_category' => 'getSalesSdDocumentCategory',
        'higher_level_item' => 'getHigherLevelItem',
        'billing_document_item_in_part_sgmt' => 'getBillingDocumentItemInPartSgmt',
        'sales_group' => 'getSalesGroup',
        'additional_customer_group1' => 'getAdditionalCustomerGroup1',
        'additional_customer_group2' => 'getAdditionalCustomerGroup2',
        'additional_customer_group3' => 'getAdditionalCustomerGroup3',
        'additional_customer_group4' => 'getAdditionalCustomerGroup4',
        'additional_customer_group5' => 'getAdditionalCustomerGroup5',
        'sd_document_reason' => 'getSdDocumentReason',
        'item_is_relevant_for_credit' => 'getItemIsRelevantForCredit',
        'credit_related_price' => 'getCreditRelatedPrice',
        'shipping_point' => 'getShippingPoint',
        'service_document_type' => 'getServiceDocumentType',
        'service_document' => 'getServiceDocument',
        'service_document_item' => 'getServiceDocumentItem',
        'business_solution_order' => 'getBusinessSolutionOrder',
        'business_solution_order_item' => 'getBusinessSolutionOrderItem',
        'higher_level_item_usage' => 'getHigherLevelItemUsage',
        'sap__messages' => 'getSapMessages',
        '_billing_document' => 'getBillingDocument',
        '_item_partner' => 'getItemPartner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('billing_document', $data ?? [], null);
        $this->setIfExists('billing_document_item', $data ?? [], null);
        $this->setIfExists('sales_document_item_category', $data ?? [], null);
        $this->setIfExists('sales_document_item_type', $data ?? [], null);
        $this->setIfExists('return_item_processing_type', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('creation_time', $data ?? [], null);
        $this->setIfExists('reference_logical_system', $data ?? [], null);
        $this->setIfExists('organization_division', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('sales_office', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('originally_requested_material', $data ?? [], null);
        $this->setIfExists('international_article_number', $data ?? [], null);
        $this->setIfExists('pricing_reference_material', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('product_group', $data ?? [], null);
        $this->setIfExists('additional_material_group1', $data ?? [], null);
        $this->setIfExists('additional_material_group2', $data ?? [], null);
        $this->setIfExists('additional_material_group3', $data ?? [], null);
        $this->setIfExists('additional_material_group4', $data ?? [], null);
        $this->setIfExists('additional_material_group5', $data ?? [], null);
        $this->setIfExists('product_configuration', $data ?? [], null);
        $this->setIfExists('plant', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('plant_region', $data ?? [], null);
        $this->setIfExists('plant_county', $data ?? [], null);
        $this->setIfExists('plant_city', $data ?? [], null);
        $this->setIfExists('material_determination_type', $data ?? [], null);
        $this->setIfExists('sold_product', $data ?? [], null);
        $this->setIfExists('billing_document_item_text', $data ?? [], null);
        $this->setIfExists('services_rendered_date', $data ?? [], null);
        $this->setIfExists('billing_quantity', $data ?? [], null);
        $this->setIfExists('billing_quantity_unit_sap_code', $data ?? [], null);
        $this->setIfExists('billing_quantity_unit_iso_code', $data ?? [], null);
        $this->setIfExists('billing_quantity_in_base_unit', $data ?? [], null);
        $this->setIfExists('base_unit_sap_code', $data ?? [], null);
        $this->setIfExists('base_unit_iso_code', $data ?? [], null);
        $this->setIfExists('mrp_required_quantity_in_base_unit', $data ?? [], null);
        $this->setIfExists('billing_to_base_quantity_dnmntr', $data ?? [], null);
        $this->setIfExists('billing_to_base_quantity_nmrtr', $data ?? [], null);
        $this->setIfExists('item_gross_weight', $data ?? [], null);
        $this->setIfExists('item_net_weight', $data ?? [], null);
        $this->setIfExists('item_weight_unit_sap_code', $data ?? [], null);
        $this->setIfExists('item_weight_unit_iso_code', $data ?? [], null);
        $this->setIfExists('item_volume', $data ?? [], null);
        $this->setIfExists('item_volume_unit_sap_code', $data ?? [], null);
        $this->setIfExists('item_volume_unit_iso_code', $data ?? [], null);
        $this->setIfExists('billing_plan_rule', $data ?? [], null);
        $this->setIfExists('billing_plan', $data ?? [], null);
        $this->setIfExists('billing_plan_item', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('transaction_currency', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('pricing_date', $data ?? [], null);
        $this->setIfExists('abslt_price_detn_exchange_rate', $data ?? [], null);
        $this->setIfExists('price_detn_exch_rate_is_indrct_qtan', $data ?? [], null);
        $this->setIfExists('price_detn_exchange_rate_date', $data ?? [], null);
        $this->setIfExists('pricing_scale_quantity_in_base_unit', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('cost_amount', $data ?? [], null);
        $this->setIfExists('subtotal1_amount', $data ?? [], null);
        $this->setIfExists('subtotal2_amount', $data ?? [], null);
        $this->setIfExists('subtotal3_amount', $data ?? [], null);
        $this->setIfExists('subtotal4_amount', $data ?? [], null);
        $this->setIfExists('subtotal5_amount', $data ?? [], null);
        $this->setIfExists('subtotal6_amount', $data ?? [], null);
        $this->setIfExists('statistical_value_control', $data ?? [], null);
        $this->setIfExists('cash_discount_is_deductible', $data ?? [], null);
        $this->setIfExists('customer_condition_group1', $data ?? [], null);
        $this->setIfExists('customer_condition_group2', $data ?? [], null);
        $this->setIfExists('customer_condition_group3', $data ?? [], null);
        $this->setIfExists('customer_condition_group4', $data ?? [], null);
        $this->setIfExists('customer_condition_group5', $data ?? [], null);
        $this->setIfExists('manual_price_change_type', $data ?? [], null);
        $this->setIfExists('material_pricing_group', $data ?? [], null);
        $this->setIfExists('abslt_statistics_exchange_rate', $data ?? [], null);
        $this->setIfExists('statistics_exch_rate_is_indrct_qtan', $data ?? [], null);
        $this->setIfExists('main_item_pricing_ref_material', $data ?? [], null);
        $this->setIfExists('main_item_material_pricing_group', $data ?? [], null);
        $this->setIfExists('time_sheet_overtime_category', $data ?? [], null);
        $this->setIfExists('departure_country', $data ?? [], null);
        $this->setIfExists('tax_jurisdiction', $data ?? [], null);
        $this->setIfExists('product_tax_classification1', $data ?? [], null);
        $this->setIfExists('product_tax_classification2', $data ?? [], null);
        $this->setIfExists('product_tax_classification3', $data ?? [], null);
        $this->setIfExists('product_tax_classification4', $data ?? [], null);
        $this->setIfExists('product_tax_classification5', $data ?? [], null);
        $this->setIfExists('product_tax_classification6', $data ?? [], null);
        $this->setIfExists('product_tax_classification7', $data ?? [], null);
        $this->setIfExists('product_tax_classification8', $data ?? [], null);
        $this->setIfExists('product_tax_classification9', $data ?? [], null);
        $this->setIfExists('tax_code', $data ?? [], null);
        $this->setIfExists('tax_rate_validity_start_date', $data ?? [], null);
        $this->setIfExists('eligible_amount_for_cash_discount', $data ?? [], null);
        $this->setIfExists('business_area', $data ?? [], null);
        $this->setIfExists('profit_center', $data ?? [], null);
        $this->setIfExists('wbs_element_external_id', $data ?? [], null);
        $this->setIfExists('provider_contract', $data ?? [], null);
        $this->setIfExists('provider_contract_item', $data ?? [], null);
        $this->setIfExists('billing_period_of_perf_start_date', $data ?? [], null);
        $this->setIfExists('billing_period_of_perf_end_date', $data ?? [], null);
        $this->setIfExists('controlling_area', $data ?? [], null);
        $this->setIfExists('cost_center', $data ?? [], null);
        $this->setIfExists('matl_account_assignment_group', $data ?? [], null);
        $this->setIfExists('reference_sd_document', $data ?? [], null);
        $this->setIfExists('reference_sd_document_item', $data ?? [], null);
        $this->setIfExists('reference_sd_document_category', $data ?? [], null);
        $this->setIfExists('sales_document', $data ?? [], null);
        $this->setIfExists('sales_document_item', $data ?? [], null);
        $this->setIfExists('sales_sd_document_category', $data ?? [], null);
        $this->setIfExists('higher_level_item', $data ?? [], null);
        $this->setIfExists('billing_document_item_in_part_sgmt', $data ?? [], null);
        $this->setIfExists('sales_group', $data ?? [], null);
        $this->setIfExists('additional_customer_group1', $data ?? [], null);
        $this->setIfExists('additional_customer_group2', $data ?? [], null);
        $this->setIfExists('additional_customer_group3', $data ?? [], null);
        $this->setIfExists('additional_customer_group4', $data ?? [], null);
        $this->setIfExists('additional_customer_group5', $data ?? [], null);
        $this->setIfExists('sd_document_reason', $data ?? [], null);
        $this->setIfExists('item_is_relevant_for_credit', $data ?? [], null);
        $this->setIfExists('credit_related_price', $data ?? [], null);
        $this->setIfExists('shipping_point', $data ?? [], null);
        $this->setIfExists('service_document_type', $data ?? [], null);
        $this->setIfExists('service_document', $data ?? [], null);
        $this->setIfExists('service_document_item', $data ?? [], null);
        $this->setIfExists('business_solution_order', $data ?? [], null);
        $this->setIfExists('business_solution_order_item', $data ?? [], null);
        $this->setIfExists('higher_level_item_usage', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_billing_document', $data ?? [], null);
        $this->setIfExists('_item_partner', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['billing_document']) && (mb_strlen($this->container['billing_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'billing_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['billing_document_item']) && (mb_strlen($this->container['billing_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'billing_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sales_document_item_category']) && (mb_strlen($this->container['sales_document_item_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_document_item_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_document_item_type']) && (mb_strlen($this->container['sales_document_item_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'sales_document_item_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['return_item_processing_type']) && (mb_strlen($this->container['return_item_processing_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'return_item_processing_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['created_by_user']) && (mb_strlen($this->container['created_by_user']) > 12)) {
            $invalidProperties[] = "invalid value for 'created_by_user', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['reference_logical_system']) && (mb_strlen($this->container['reference_logical_system']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_logical_system', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['organization_division']) && (mb_strlen($this->container['organization_division']) > 2)) {
            $invalidProperties[] = "invalid value for 'organization_division', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['division']) && (mb_strlen($this->container['division']) > 2)) {
            $invalidProperties[] = "invalid value for 'division', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sales_office']) && (mb_strlen($this->container['sales_office']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_office', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['product']) && (mb_strlen($this->container['product']) > 18)) {
            $invalidProperties[] = "invalid value for 'product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['originally_requested_material']) && (mb_strlen($this->container['originally_requested_material']) > 18)) {
            $invalidProperties[] = "invalid value for 'originally_requested_material', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['international_article_number']) && (mb_strlen($this->container['international_article_number']) > 18)) {
            $invalidProperties[] = "invalid value for 'international_article_number', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['pricing_reference_material']) && (mb_strlen($this->container['pricing_reference_material']) > 18)) {
            $invalidProperties[] = "invalid value for 'pricing_reference_material', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['product_group']) && (mb_strlen($this->container['product_group']) > 9)) {
            $invalidProperties[] = "invalid value for 'product_group', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['additional_material_group1']) && (mb_strlen($this->container['additional_material_group1']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group1', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group2']) && (mb_strlen($this->container['additional_material_group2']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group2', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group3']) && (mb_strlen($this->container['additional_material_group3']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group3', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group4']) && (mb_strlen($this->container['additional_material_group4']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group4', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group5']) && (mb_strlen($this->container['additional_material_group5']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group5', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['product_configuration']) && (mb_strlen($this->container['product_configuration']) > 18)) {
            $invalidProperties[] = "invalid value for 'product_configuration', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['plant']) && (mb_strlen($this->container['plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['storage_location']) && (mb_strlen($this->container['storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'storage_location', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['plant_region']) && (mb_strlen($this->container['plant_region']) > 3)) {
            $invalidProperties[] = "invalid value for 'plant_region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['plant_county']) && (mb_strlen($this->container['plant_county']) > 3)) {
            $invalidProperties[] = "invalid value for 'plant_county', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['plant_city']) && (mb_strlen($this->container['plant_city']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant_city', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['material_determination_type']) && (mb_strlen($this->container['material_determination_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'material_determination_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['sold_product']) && (mb_strlen($this->container['sold_product']) > 18)) {
            $invalidProperties[] = "invalid value for 'sold_product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['billing_document_item_text']) && (mb_strlen($this->container['billing_document_item_text']) > 40)) {
            $invalidProperties[] = "invalid value for 'billing_document_item_text', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['billing_quantity_unit_sap_code']) && (mb_strlen($this->container['billing_quantity_unit_sap_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'billing_quantity_unit_sap_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['billing_quantity_unit_iso_code']) && (mb_strlen($this->container['billing_quantity_unit_iso_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'billing_quantity_unit_iso_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_unit_sap_code']) && (mb_strlen($this->container['base_unit_sap_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit_sap_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_unit_iso_code']) && (mb_strlen($this->container['base_unit_iso_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit_iso_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_weight_unit_sap_code']) && (mb_strlen($this->container['item_weight_unit_sap_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_weight_unit_sap_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_weight_unit_iso_code']) && (mb_strlen($this->container['item_weight_unit_iso_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_weight_unit_iso_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_volume_unit_sap_code']) && (mb_strlen($this->container['item_volume_unit_sap_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_volume_unit_sap_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_volume_unit_iso_code']) && (mb_strlen($this->container['item_volume_unit_iso_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_volume_unit_iso_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['billing_plan_rule']) && (mb_strlen($this->container['billing_plan_rule']) > 1)) {
            $invalidProperties[] = "invalid value for 'billing_plan_rule', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['billing_plan']) && (mb_strlen($this->container['billing_plan']) > 10)) {
            $invalidProperties[] = "invalid value for 'billing_plan', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['billing_plan_item']) && (mb_strlen($this->container['billing_plan_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'billing_plan_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['transaction_currency']) && (mb_strlen($this->container['transaction_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'transaction_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['statistical_value_control']) && (mb_strlen($this->container['statistical_value_control']) > 1)) {
            $invalidProperties[] = "invalid value for 'statistical_value_control', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_condition_group1']) && (mb_strlen($this->container['customer_condition_group1']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_condition_group1', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_condition_group2']) && (mb_strlen($this->container['customer_condition_group2']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_condition_group2', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_condition_group3']) && (mb_strlen($this->container['customer_condition_group3']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_condition_group3', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_condition_group4']) && (mb_strlen($this->container['customer_condition_group4']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_condition_group4', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_condition_group5']) && (mb_strlen($this->container['customer_condition_group5']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_condition_group5', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['manual_price_change_type']) && (mb_strlen($this->container['manual_price_change_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'manual_price_change_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['material_pricing_group']) && (mb_strlen($this->container['material_pricing_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'material_pricing_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['main_item_pricing_ref_material']) && (mb_strlen($this->container['main_item_pricing_ref_material']) > 18)) {
            $invalidProperties[] = "invalid value for 'main_item_pricing_ref_material', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['main_item_material_pricing_group']) && (mb_strlen($this->container['main_item_material_pricing_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'main_item_material_pricing_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['time_sheet_overtime_category']) && (mb_strlen($this->container['time_sheet_overtime_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'time_sheet_overtime_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['departure_country']) && (mb_strlen($this->container['departure_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'departure_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['tax_jurisdiction']) && (mb_strlen($this->container['tax_jurisdiction']) > 15)) {
            $invalidProperties[] = "invalid value for 'tax_jurisdiction', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['product_tax_classification1']) && (mb_strlen($this->container['product_tax_classification1']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification1', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification2']) && (mb_strlen($this->container['product_tax_classification2']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification2', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification3']) && (mb_strlen($this->container['product_tax_classification3']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification3', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification4']) && (mb_strlen($this->container['product_tax_classification4']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification4', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification5']) && (mb_strlen($this->container['product_tax_classification5']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification5', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification6']) && (mb_strlen($this->container['product_tax_classification6']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification6', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification7']) && (mb_strlen($this->container['product_tax_classification7']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification7', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification8']) && (mb_strlen($this->container['product_tax_classification8']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification8', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification9']) && (mb_strlen($this->container['product_tax_classification9']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification9', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['tax_code']) && (mb_strlen($this->container['tax_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'tax_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['business_area']) && (mb_strlen($this->container['business_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'business_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['profit_center']) && (mb_strlen($this->container['profit_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'profit_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['wbs_element_external_id']) && (mb_strlen($this->container['wbs_element_external_id']) > 24)) {
            $invalidProperties[] = "invalid value for 'wbs_element_external_id', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['provider_contract']) && (mb_strlen($this->container['provider_contract']) > 20)) {
            $invalidProperties[] = "invalid value for 'provider_contract', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['provider_contract_item']) && (mb_strlen($this->container['provider_contract_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'provider_contract_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['controlling_area']) && (mb_strlen($this->container['controlling_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'controlling_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['cost_center']) && (mb_strlen($this->container['cost_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'cost_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['matl_account_assignment_group']) && (mb_strlen($this->container['matl_account_assignment_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'matl_account_assignment_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['reference_sd_document']) && (mb_strlen($this->container['reference_sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document_item']) && (mb_strlen($this->container['reference_sd_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['reference_sd_document_category']) && (mb_strlen($this->container['reference_sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_document']) && (mb_strlen($this->container['sales_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_document_item']) && (mb_strlen($this->container['sales_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sales_sd_document_category']) && (mb_strlen($this->container['sales_sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_sd_document_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['higher_level_item']) && (mb_strlen($this->container['higher_level_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'higher_level_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['billing_document_item_in_part_sgmt']) && (mb_strlen($this->container['billing_document_item_in_part_sgmt']) > 6)) {
            $invalidProperties[] = "invalid value for 'billing_document_item_in_part_sgmt', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sales_group']) && (mb_strlen($this->container['sales_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'sales_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group1']) && (mb_strlen($this->container['additional_customer_group1']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group1', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group2']) && (mb_strlen($this->container['additional_customer_group2']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group2', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group3']) && (mb_strlen($this->container['additional_customer_group3']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group3', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group4']) && (mb_strlen($this->container['additional_customer_group4']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group4', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group5']) && (mb_strlen($this->container['additional_customer_group5']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group5', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['sd_document_reason']) && (mb_strlen($this->container['sd_document_reason']) > 3)) {
            $invalidProperties[] = "invalid value for 'sd_document_reason', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['shipping_point']) && (mb_strlen($this->container['shipping_point']) > 4)) {
            $invalidProperties[] = "invalid value for 'shipping_point', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['service_document_type']) && (mb_strlen($this->container['service_document_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'service_document_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['service_document']) && (mb_strlen($this->container['service_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'service_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['service_document_item']) && (mb_strlen($this->container['service_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'service_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['business_solution_order']) && (mb_strlen($this->container['business_solution_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_solution_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['business_solution_order_item']) && (mb_strlen($this->container['business_solution_order_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'business_solution_order_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['higher_level_item_usage']) && (mb_strlen($this->container['higher_level_item_usage']) > 1)) {
            $invalidProperties[] = "invalid value for 'higher_level_item_usage', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_document
     *
     * @return string|null
     */
    public function getBillingDocument()
    {
        return $this->container['billing_document'];
    }

    /**
     * Sets billing_document
     *
     * @param string|null $billing_document billing_document
     *
     * @return self
     */
    public function setBillingDocument($billing_document)
    {
        if (is_null($billing_document)) {
            throw new \InvalidArgumentException('non-nullable billing_document cannot be null');
        }
        if ((mb_strlen($billing_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $billing_document when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 10.');
        }

        $this->container['billing_document'] = $billing_document;

        return $this;
    }

    /**
     * Gets billing_document_item
     *
     * @return string|null
     */
    public function getBillingDocumentItem()
    {
        return $this->container['billing_document_item'];
    }

    /**
     * Sets billing_document_item
     *
     * @param string|null $billing_document_item Billing Item
     *
     * @return self
     */
    public function setBillingDocumentItem($billing_document_item)
    {
        if (is_null($billing_document_item)) {
            throw new \InvalidArgumentException('non-nullable billing_document_item cannot be null');
        }
        if ((mb_strlen($billing_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $billing_document_item when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 6.');
        }

        $this->container['billing_document_item'] = $billing_document_item;

        return $this;
    }

    /**
     * Gets sales_document_item_category
     *
     * @return string|null
     */
    public function getSalesDocumentItemCategory()
    {
        return $this->container['sales_document_item_category'];
    }

    /**
     * Sets sales_document_item_category
     *
     * @param string|null $sales_document_item_category Sales Document Item Category
     *
     * @return self
     */
    public function setSalesDocumentItemCategory($sales_document_item_category)
    {
        if (is_null($sales_document_item_category)) {
            throw new \InvalidArgumentException('non-nullable sales_document_item_category cannot be null');
        }
        if ((mb_strlen($sales_document_item_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_item_category when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['sales_document_item_category'] = $sales_document_item_category;

        return $this;
    }

    /**
     * Gets sales_document_item_type
     *
     * @return string|null
     */
    public function getSalesDocumentItemType()
    {
        return $this->container['sales_document_item_type'];
    }

    /**
     * Sets sales_document_item_type
     *
     * @param string|null $sales_document_item_type sales_document_item_type
     *
     * @return self
     */
    public function setSalesDocumentItemType($sales_document_item_type)
    {
        if (is_null($sales_document_item_type)) {
            throw new \InvalidArgumentException('non-nullable sales_document_item_type cannot be null');
        }
        if ((mb_strlen($sales_document_item_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_item_type when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['sales_document_item_type'] = $sales_document_item_type;

        return $this;
    }

    /**
     * Gets return_item_processing_type
     *
     * @return string|null
     */
    public function getReturnItemProcessingType()
    {
        return $this->container['return_item_processing_type'];
    }

    /**
     * Sets return_item_processing_type
     *
     * @param string|null $return_item_processing_type Returns item
     *
     * @return self
     */
    public function setReturnItemProcessingType($return_item_processing_type)
    {
        if (is_null($return_item_processing_type)) {
            throw new \InvalidArgumentException('non-nullable return_item_processing_type cannot be null');
        }
        if ((mb_strlen($return_item_processing_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $return_item_processing_type when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['return_item_processing_type'] = $return_item_processing_type;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string|null $created_by_user Name of Person Responsible for Creating the Object
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            throw new \InvalidArgumentException('non-nullable created_by_user cannot be null');
        }
        if ((mb_strlen($created_by_user) > 12)) {
            throw new \InvalidArgumentException('invalid length for $created_by_user when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 12.');
        }

        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date Record Creation Date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string|null
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string|null $creation_time Entry time
     *
     * @return self
     */
    public function setCreationTime($creation_time)
    {
        if (is_null($creation_time)) {
            throw new \InvalidArgumentException('non-nullable creation_time cannot be null');
        }
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets reference_logical_system
     *
     * @return string|null
     */
    public function getReferenceLogicalSystem()
    {
        return $this->container['reference_logical_system'];
    }

    /**
     * Sets reference_logical_system
     *
     * @param string|null $reference_logical_system reference_logical_system
     *
     * @return self
     */
    public function setReferenceLogicalSystem($reference_logical_system)
    {
        if (is_null($reference_logical_system)) {
            throw new \InvalidArgumentException('non-nullable reference_logical_system cannot be null');
        }
        if ((mb_strlen($reference_logical_system) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_logical_system when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 10.');
        }

        $this->container['reference_logical_system'] = $reference_logical_system;

        return $this;
    }

    /**
     * Gets organization_division
     *
     * @return string|null
     */
    public function getOrganizationDivision()
    {
        return $this->container['organization_division'];
    }

    /**
     * Sets organization_division
     *
     * @param string|null $organization_division Division in Sales Order Header
     *
     * @return self
     */
    public function setOrganizationDivision($organization_division)
    {
        if (is_null($organization_division)) {
            throw new \InvalidArgumentException('non-nullable organization_division cannot be null');
        }
        if ((mb_strlen($organization_division) > 2)) {
            throw new \InvalidArgumentException('invalid length for $organization_division when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 2.');
        }

        $this->container['organization_division'] = $organization_division;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division division
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            throw new \InvalidArgumentException('non-nullable division cannot be null');
        }
        if ((mb_strlen($division) > 2)) {
            throw new \InvalidArgumentException('invalid length for $division when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 2.');
        }

        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets sales_office
     *
     * @return string|null
     */
    public function getSalesOffice()
    {
        return $this->container['sales_office'];
    }

    /**
     * Sets sales_office
     *
     * @param string|null $sales_office sales_office
     *
     * @return self
     */
    public function setSalesOffice($sales_office)
    {
        if (is_null($sales_office)) {
            throw new \InvalidArgumentException('non-nullable sales_office cannot be null');
        }
        if ((mb_strlen($sales_office) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_office when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['sales_office'] = $sales_office;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Product Number
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        if ((mb_strlen($product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 18.');
        }

        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets originally_requested_material
     *
     * @return string|null
     */
    public function getOriginallyRequestedMaterial()
    {
        return $this->container['originally_requested_material'];
    }

    /**
     * Sets originally_requested_material
     *
     * @param string|null $originally_requested_material originally_requested_material
     *
     * @return self
     */
    public function setOriginallyRequestedMaterial($originally_requested_material)
    {
        if (is_null($originally_requested_material)) {
            throw new \InvalidArgumentException('non-nullable originally_requested_material cannot be null');
        }
        if ((mb_strlen($originally_requested_material) > 18)) {
            throw new \InvalidArgumentException('invalid length for $originally_requested_material when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 18.');
        }

        $this->container['originally_requested_material'] = $originally_requested_material;

        return $this;
    }

    /**
     * Gets international_article_number
     *
     * @return string|null
     */
    public function getInternationalArticleNumber()
    {
        return $this->container['international_article_number'];
    }

    /**
     * Sets international_article_number
     *
     * @param string|null $international_article_number International Article Number (EAN/UPC)
     *
     * @return self
     */
    public function setInternationalArticleNumber($international_article_number)
    {
        if (is_null($international_article_number)) {
            throw new \InvalidArgumentException('non-nullable international_article_number cannot be null');
        }
        if ((mb_strlen($international_article_number) > 18)) {
            throw new \InvalidArgumentException('invalid length for $international_article_number when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 18.');
        }

        $this->container['international_article_number'] = $international_article_number;

        return $this;
    }

    /**
     * Gets pricing_reference_material
     *
     * @return string|null
     */
    public function getPricingReferenceMaterial()
    {
        return $this->container['pricing_reference_material'];
    }

    /**
     * Sets pricing_reference_material
     *
     * @param string|null $pricing_reference_material Pricing Reference Material
     *
     * @return self
     */
    public function setPricingReferenceMaterial($pricing_reference_material)
    {
        if (is_null($pricing_reference_material)) {
            throw new \InvalidArgumentException('non-nullable pricing_reference_material cannot be null');
        }
        if ((mb_strlen($pricing_reference_material) > 18)) {
            throw new \InvalidArgumentException('invalid length for $pricing_reference_material when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 18.');
        }

        $this->container['pricing_reference_material'] = $pricing_reference_material;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch Batch Number
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            throw new \InvalidArgumentException('non-nullable batch cannot be null');
        }
        if ((mb_strlen($batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 10.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets product_group
     *
     * @return string|null
     */
    public function getProductGroup()
    {
        return $this->container['product_group'];
    }

    /**
     * Sets product_group
     *
     * @param string|null $product_group product_group
     *
     * @return self
     */
    public function setProductGroup($product_group)
    {
        if (is_null($product_group)) {
            throw new \InvalidArgumentException('non-nullable product_group cannot be null');
        }
        if ((mb_strlen($product_group) > 9)) {
            throw new \InvalidArgumentException('invalid length for $product_group when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 9.');
        }

        $this->container['product_group'] = $product_group;

        return $this;
    }

    /**
     * Gets additional_material_group1
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup1()
    {
        return $this->container['additional_material_group1'];
    }

    /**
     * Sets additional_material_group1
     *
     * @param string|null $additional_material_group1 additional_material_group1
     *
     * @return self
     */
    public function setAdditionalMaterialGroup1($additional_material_group1)
    {
        if (is_null($additional_material_group1)) {
            throw new \InvalidArgumentException('non-nullable additional_material_group1 cannot be null');
        }
        if ((mb_strlen($additional_material_group1) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group1 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group1'] = $additional_material_group1;

        return $this;
    }

    /**
     * Gets additional_material_group2
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup2()
    {
        return $this->container['additional_material_group2'];
    }

    /**
     * Sets additional_material_group2
     *
     * @param string|null $additional_material_group2 additional_material_group2
     *
     * @return self
     */
    public function setAdditionalMaterialGroup2($additional_material_group2)
    {
        if (is_null($additional_material_group2)) {
            throw new \InvalidArgumentException('non-nullable additional_material_group2 cannot be null');
        }
        if ((mb_strlen($additional_material_group2) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group2 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group2'] = $additional_material_group2;

        return $this;
    }

    /**
     * Gets additional_material_group3
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup3()
    {
        return $this->container['additional_material_group3'];
    }

    /**
     * Sets additional_material_group3
     *
     * @param string|null $additional_material_group3 additional_material_group3
     *
     * @return self
     */
    public function setAdditionalMaterialGroup3($additional_material_group3)
    {
        if (is_null($additional_material_group3)) {
            throw new \InvalidArgumentException('non-nullable additional_material_group3 cannot be null');
        }
        if ((mb_strlen($additional_material_group3) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group3 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group3'] = $additional_material_group3;

        return $this;
    }

    /**
     * Gets additional_material_group4
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup4()
    {
        return $this->container['additional_material_group4'];
    }

    /**
     * Sets additional_material_group4
     *
     * @param string|null $additional_material_group4 additional_material_group4
     *
     * @return self
     */
    public function setAdditionalMaterialGroup4($additional_material_group4)
    {
        if (is_null($additional_material_group4)) {
            throw new \InvalidArgumentException('non-nullable additional_material_group4 cannot be null');
        }
        if ((mb_strlen($additional_material_group4) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group4 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group4'] = $additional_material_group4;

        return $this;
    }

    /**
     * Gets additional_material_group5
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup5()
    {
        return $this->container['additional_material_group5'];
    }

    /**
     * Sets additional_material_group5
     *
     * @param string|null $additional_material_group5 additional_material_group5
     *
     * @return self
     */
    public function setAdditionalMaterialGroup5($additional_material_group5)
    {
        if (is_null($additional_material_group5)) {
            throw new \InvalidArgumentException('non-nullable additional_material_group5 cannot be null');
        }
        if ((mb_strlen($additional_material_group5) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group5 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group5'] = $additional_material_group5;

        return $this;
    }

    /**
     * Gets product_configuration
     *
     * @return string|null
     */
    public function getProductConfiguration()
    {
        return $this->container['product_configuration'];
    }

    /**
     * Sets product_configuration
     *
     * @param string|null $product_configuration product_configuration
     *
     * @return self
     */
    public function setProductConfiguration($product_configuration)
    {
        if (is_null($product_configuration)) {
            throw new \InvalidArgumentException('non-nullable product_configuration cannot be null');
        }
        if ((mb_strlen($product_configuration) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product_configuration when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 18.');
        }

        $this->container['product_configuration'] = $product_configuration;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return string|null
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param string|null $plant plant
     *
     * @return self
     */
    public function setPlant($plant)
    {
        if (is_null($plant)) {
            throw new \InvalidArgumentException('non-nullable plant cannot be null');
        }
        if ((mb_strlen($plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return string|null
     */
    public function getStorageLocation()
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param string|null $storage_location storage_location
     *
     * @return self
     */
    public function setStorageLocation($storage_location)
    {
        if (is_null($storage_location)) {
            throw new \InvalidArgumentException('non-nullable storage_location cannot be null');
        }
        if ((mb_strlen($storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $storage_location when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets plant_region
     *
     * @return string|null
     */
    public function getPlantRegion()
    {
        return $this->container['plant_region'];
    }

    /**
     * Sets plant_region
     *
     * @param string|null $plant_region Region in which plant is located
     *
     * @return self
     */
    public function setPlantRegion($plant_region)
    {
        if (is_null($plant_region)) {
            throw new \InvalidArgumentException('non-nullable plant_region cannot be null');
        }
        if ((mb_strlen($plant_region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $plant_region when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['plant_region'] = $plant_region;

        return $this;
    }

    /**
     * Gets plant_county
     *
     * @return string|null
     */
    public function getPlantCounty()
    {
        return $this->container['plant_county'];
    }

    /**
     * Sets plant_county
     *
     * @param string|null $plant_county County in which plant is located
     *
     * @return self
     */
    public function setPlantCounty($plant_county)
    {
        if (is_null($plant_county)) {
            throw new \InvalidArgumentException('non-nullable plant_county cannot be null');
        }
        if ((mb_strlen($plant_county) > 3)) {
            throw new \InvalidArgumentException('invalid length for $plant_county when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['plant_county'] = $plant_county;

        return $this;
    }

    /**
     * Gets plant_city
     *
     * @return string|null
     */
    public function getPlantCity()
    {
        return $this->container['plant_city'];
    }

    /**
     * Sets plant_city
     *
     * @param string|null $plant_city City in which plant is located
     *
     * @return self
     */
    public function setPlantCity($plant_city)
    {
        if (is_null($plant_city)) {
            throw new \InvalidArgumentException('non-nullable plant_city cannot be null');
        }
        if ((mb_strlen($plant_city) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant_city when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['plant_city'] = $plant_city;

        return $this;
    }

    /**
     * Gets material_determination_type
     *
     * @return string|null
     */
    public function getMaterialDeterminationType()
    {
        return $this->container['material_determination_type'];
    }

    /**
     * Sets material_determination_type
     *
     * @param string|null $material_determination_type ID for material determination
     *
     * @return self
     */
    public function setMaterialDeterminationType($material_determination_type)
    {
        if (is_null($material_determination_type)) {
            throw new \InvalidArgumentException('non-nullable material_determination_type cannot be null');
        }
        if ((mb_strlen($material_determination_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $material_determination_type when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['material_determination_type'] = $material_determination_type;

        return $this;
    }

    /**
     * Gets sold_product
     *
     * @return string|null
     */
    public function getSoldProduct()
    {
        return $this->container['sold_product'];
    }

    /**
     * Sets sold_product
     *
     * @param string|null $sold_product Sales Billing: Product Sold
     *
     * @return self
     */
    public function setSoldProduct($sold_product)
    {
        if (is_null($sold_product)) {
            throw new \InvalidArgumentException('non-nullable sold_product cannot be null');
        }
        if ((mb_strlen($sold_product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $sold_product when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 18.');
        }

        $this->container['sold_product'] = $sold_product;

        return $this;
    }

    /**
     * Gets billing_document_item_text
     *
     * @return string|null
     */
    public function getBillingDocumentItemText()
    {
        return $this->container['billing_document_item_text'];
    }

    /**
     * Sets billing_document_item_text
     *
     * @param string|null $billing_document_item_text Short Text for Sales Order Item
     *
     * @return self
     */
    public function setBillingDocumentItemText($billing_document_item_text)
    {
        if (is_null($billing_document_item_text)) {
            throw new \InvalidArgumentException('non-nullable billing_document_item_text cannot be null');
        }
        if ((mb_strlen($billing_document_item_text) > 40)) {
            throw new \InvalidArgumentException('invalid length for $billing_document_item_text when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 40.');
        }

        $this->container['billing_document_item_text'] = $billing_document_item_text;

        return $this;
    }

    /**
     * Gets services_rendered_date
     *
     * @return \DateTime|null
     */
    public function getServicesRenderedDate()
    {
        return $this->container['services_rendered_date'];
    }

    /**
     * Sets services_rendered_date
     *
     * @param \DateTime|null $services_rendered_date Date on which services are rendered
     *
     * @return self
     */
    public function setServicesRenderedDate($services_rendered_date)
    {
        if (is_null($services_rendered_date)) {
            array_push($this->openAPINullablesSetToNull, 'services_rendered_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('services_rendered_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['services_rendered_date'] = $services_rendered_date;

        return $this;
    }

    /**
     * Gets billing_quantity
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\InvoicedQuantity|null
     */
    public function getBillingQuantity()
    {
        return $this->container['billing_quantity'];
    }

    /**
     * Sets billing_quantity
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\InvoicedQuantity|null $billing_quantity billing_quantity
     *
     * @return self
     */
    public function setBillingQuantity($billing_quantity)
    {
        if (is_null($billing_quantity)) {
            throw new \InvalidArgumentException('non-nullable billing_quantity cannot be null');
        }
        $this->container['billing_quantity'] = $billing_quantity;

        return $this;
    }

    /**
     * Gets billing_quantity_unit_sap_code
     *
     * @return string|null
     */
    public function getBillingQuantityUnitSapCode()
    {
        return $this->container['billing_quantity_unit_sap_code'];
    }

    /**
     * Sets billing_quantity_unit_sap_code
     *
     * @param string|null $billing_quantity_unit_sap_code billing_quantity_unit_sap_code
     *
     * @return self
     */
    public function setBillingQuantityUnitSapCode($billing_quantity_unit_sap_code)
    {
        if (is_null($billing_quantity_unit_sap_code)) {
            throw new \InvalidArgumentException('non-nullable billing_quantity_unit_sap_code cannot be null');
        }
        if ((mb_strlen($billing_quantity_unit_sap_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $billing_quantity_unit_sap_code when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['billing_quantity_unit_sap_code'] = $billing_quantity_unit_sap_code;

        return $this;
    }

    /**
     * Gets billing_quantity_unit_iso_code
     *
     * @return string|null
     */
    public function getBillingQuantityUnitIsoCode()
    {
        return $this->container['billing_quantity_unit_iso_code'];
    }

    /**
     * Sets billing_quantity_unit_iso_code
     *
     * @param string|null $billing_quantity_unit_iso_code billing_quantity_unit_iso_code
     *
     * @return self
     */
    public function setBillingQuantityUnitIsoCode($billing_quantity_unit_iso_code)
    {
        if (is_null($billing_quantity_unit_iso_code)) {
            throw new \InvalidArgumentException('non-nullable billing_quantity_unit_iso_code cannot be null');
        }
        if ((mb_strlen($billing_quantity_unit_iso_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $billing_quantity_unit_iso_code when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['billing_quantity_unit_iso_code'] = $billing_quantity_unit_iso_code;

        return $this;
    }

    /**
     * Gets billing_quantity_in_base_unit
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\BillingQtyInSKU|null
     */
    public function getBillingQuantityInBaseUnit()
    {
        return $this->container['billing_quantity_in_base_unit'];
    }

    /**
     * Sets billing_quantity_in_base_unit
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\BillingQtyInSKU|null $billing_quantity_in_base_unit billing_quantity_in_base_unit
     *
     * @return self
     */
    public function setBillingQuantityInBaseUnit($billing_quantity_in_base_unit)
    {
        if (is_null($billing_quantity_in_base_unit)) {
            throw new \InvalidArgumentException('non-nullable billing_quantity_in_base_unit cannot be null');
        }
        $this->container['billing_quantity_in_base_unit'] = $billing_quantity_in_base_unit;

        return $this;
    }

    /**
     * Gets base_unit_sap_code
     *
     * @return string|null
     */
    public function getBaseUnitSapCode()
    {
        return $this->container['base_unit_sap_code'];
    }

    /**
     * Sets base_unit_sap_code
     *
     * @param string|null $base_unit_sap_code base_unit_sap_code
     *
     * @return self
     */
    public function setBaseUnitSapCode($base_unit_sap_code)
    {
        if (is_null($base_unit_sap_code)) {
            throw new \InvalidArgumentException('non-nullable base_unit_sap_code cannot be null');
        }
        if ((mb_strlen($base_unit_sap_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit_sap_code when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['base_unit_sap_code'] = $base_unit_sap_code;

        return $this;
    }

    /**
     * Gets base_unit_iso_code
     *
     * @return string|null
     */
    public function getBaseUnitIsoCode()
    {
        return $this->container['base_unit_iso_code'];
    }

    /**
     * Sets base_unit_iso_code
     *
     * @param string|null $base_unit_iso_code Base unit of measure in ISO code
     *
     * @return self
     */
    public function setBaseUnitIsoCode($base_unit_iso_code)
    {
        if (is_null($base_unit_iso_code)) {
            throw new \InvalidArgumentException('non-nullable base_unit_iso_code cannot be null');
        }
        if ((mb_strlen($base_unit_iso_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit_iso_code when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['base_unit_iso_code'] = $base_unit_iso_code;

        return $this;
    }

    /**
     * Gets mrp_required_quantity_in_base_unit
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\RequiredQuantity|null
     */
    public function getMrpRequiredQuantityInBaseUnit()
    {
        return $this->container['mrp_required_quantity_in_base_unit'];
    }

    /**
     * Sets mrp_required_quantity_in_base_unit
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\RequiredQuantity|null $mrp_required_quantity_in_base_unit mrp_required_quantity_in_base_unit
     *
     * @return self
     */
    public function setMrpRequiredQuantityInBaseUnit($mrp_required_quantity_in_base_unit)
    {
        if (is_null($mrp_required_quantity_in_base_unit)) {
            throw new \InvalidArgumentException('non-nullable mrp_required_quantity_in_base_unit cannot be null');
        }
        $this->container['mrp_required_quantity_in_base_unit'] = $mrp_required_quantity_in_base_unit;

        return $this;
    }

    /**
     * Gets billing_to_base_quantity_dnmntr
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\Denominator|null
     */
    public function getBillingToBaseQuantityDnmntr()
    {
        return $this->container['billing_to_base_quantity_dnmntr'];
    }

    /**
     * Sets billing_to_base_quantity_dnmntr
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\Denominator|null $billing_to_base_quantity_dnmntr billing_to_base_quantity_dnmntr
     *
     * @return self
     */
    public function setBillingToBaseQuantityDnmntr($billing_to_base_quantity_dnmntr)
    {
        if (is_null($billing_to_base_quantity_dnmntr)) {
            throw new \InvalidArgumentException('non-nullable billing_to_base_quantity_dnmntr cannot be null');
        }
        $this->container['billing_to_base_quantity_dnmntr'] = $billing_to_base_quantity_dnmntr;

        return $this;
    }

    /**
     * Gets billing_to_base_quantity_nmrtr
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\Numerator|null
     */
    public function getBillingToBaseQuantityNmrtr()
    {
        return $this->container['billing_to_base_quantity_nmrtr'];
    }

    /**
     * Sets billing_to_base_quantity_nmrtr
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\Numerator|null $billing_to_base_quantity_nmrtr billing_to_base_quantity_nmrtr
     *
     * @return self
     */
    public function setBillingToBaseQuantityNmrtr($billing_to_base_quantity_nmrtr)
    {
        if (is_null($billing_to_base_quantity_nmrtr)) {
            throw new \InvalidArgumentException('non-nullable billing_to_base_quantity_nmrtr cannot be null');
        }
        $this->container['billing_to_base_quantity_nmrtr'] = $billing_to_base_quantity_nmrtr;

        return $this;
    }

    /**
     * Gets item_gross_weight
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\GrossWeight|null
     */
    public function getItemGrossWeight()
    {
        return $this->container['item_gross_weight'];
    }

    /**
     * Sets item_gross_weight
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\GrossWeight|null $item_gross_weight item_gross_weight
     *
     * @return self
     */
    public function setItemGrossWeight($item_gross_weight)
    {
        if (is_null($item_gross_weight)) {
            throw new \InvalidArgumentException('non-nullable item_gross_weight cannot be null');
        }
        $this->container['item_gross_weight'] = $item_gross_weight;

        return $this;
    }

    /**
     * Gets item_net_weight
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\NetWeight|null
     */
    public function getItemNetWeight()
    {
        return $this->container['item_net_weight'];
    }

    /**
     * Sets item_net_weight
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\NetWeight|null $item_net_weight item_net_weight
     *
     * @return self
     */
    public function setItemNetWeight($item_net_weight)
    {
        if (is_null($item_net_weight)) {
            throw new \InvalidArgumentException('non-nullable item_net_weight cannot be null');
        }
        $this->container['item_net_weight'] = $item_net_weight;

        return $this;
    }

    /**
     * Gets item_weight_unit_sap_code
     *
     * @return string|null
     */
    public function getItemWeightUnitSapCode()
    {
        return $this->container['item_weight_unit_sap_code'];
    }

    /**
     * Sets item_weight_unit_sap_code
     *
     * @param string|null $item_weight_unit_sap_code item_weight_unit_sap_code
     *
     * @return self
     */
    public function setItemWeightUnitSapCode($item_weight_unit_sap_code)
    {
        if (is_null($item_weight_unit_sap_code)) {
            throw new \InvalidArgumentException('non-nullable item_weight_unit_sap_code cannot be null');
        }
        if ((mb_strlen($item_weight_unit_sap_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_weight_unit_sap_code when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_weight_unit_sap_code'] = $item_weight_unit_sap_code;

        return $this;
    }

    /**
     * Gets item_weight_unit_iso_code
     *
     * @return string|null
     */
    public function getItemWeightUnitIsoCode()
    {
        return $this->container['item_weight_unit_iso_code'];
    }

    /**
     * Sets item_weight_unit_iso_code
     *
     * @param string|null $item_weight_unit_iso_code Unit of weight in ISO code
     *
     * @return self
     */
    public function setItemWeightUnitIsoCode($item_weight_unit_iso_code)
    {
        if (is_null($item_weight_unit_iso_code)) {
            throw new \InvalidArgumentException('non-nullable item_weight_unit_iso_code cannot be null');
        }
        if ((mb_strlen($item_weight_unit_iso_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_weight_unit_iso_code when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_weight_unit_iso_code'] = $item_weight_unit_iso_code;

        return $this;
    }

    /**
     * Gets item_volume
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\Volume|null
     */
    public function getItemVolume()
    {
        return $this->container['item_volume'];
    }

    /**
     * Sets item_volume
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\Volume|null $item_volume item_volume
     *
     * @return self
     */
    public function setItemVolume($item_volume)
    {
        if (is_null($item_volume)) {
            throw new \InvalidArgumentException('non-nullable item_volume cannot be null');
        }
        $this->container['item_volume'] = $item_volume;

        return $this;
    }

    /**
     * Gets item_volume_unit_sap_code
     *
     * @return string|null
     */
    public function getItemVolumeUnitSapCode()
    {
        return $this->container['item_volume_unit_sap_code'];
    }

    /**
     * Sets item_volume_unit_sap_code
     *
     * @param string|null $item_volume_unit_sap_code item_volume_unit_sap_code
     *
     * @return self
     */
    public function setItemVolumeUnitSapCode($item_volume_unit_sap_code)
    {
        if (is_null($item_volume_unit_sap_code)) {
            throw new \InvalidArgumentException('non-nullable item_volume_unit_sap_code cannot be null');
        }
        if ((mb_strlen($item_volume_unit_sap_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_volume_unit_sap_code when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_volume_unit_sap_code'] = $item_volume_unit_sap_code;

        return $this;
    }

    /**
     * Gets item_volume_unit_iso_code
     *
     * @return string|null
     */
    public function getItemVolumeUnitIsoCode()
    {
        return $this->container['item_volume_unit_iso_code'];
    }

    /**
     * Sets item_volume_unit_iso_code
     *
     * @param string|null $item_volume_unit_iso_code Volume unit in ISO code
     *
     * @return self
     */
    public function setItemVolumeUnitIsoCode($item_volume_unit_iso_code)
    {
        if (is_null($item_volume_unit_iso_code)) {
            throw new \InvalidArgumentException('non-nullable item_volume_unit_iso_code cannot be null');
        }
        if ((mb_strlen($item_volume_unit_iso_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_volume_unit_iso_code when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_volume_unit_iso_code'] = $item_volume_unit_iso_code;

        return $this;
    }

    /**
     * Gets billing_plan_rule
     *
     * @return string|null
     */
    public function getBillingPlanRule()
    {
        return $this->container['billing_plan_rule'];
    }

    /**
     * Sets billing_plan_rule
     *
     * @param string|null $billing_plan_rule Rule in billing plan/invoice plan
     *
     * @return self
     */
    public function setBillingPlanRule($billing_plan_rule)
    {
        if (is_null($billing_plan_rule)) {
            throw new \InvalidArgumentException('non-nullable billing_plan_rule cannot be null');
        }
        if ((mb_strlen($billing_plan_rule) > 1)) {
            throw new \InvalidArgumentException('invalid length for $billing_plan_rule when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['billing_plan_rule'] = $billing_plan_rule;

        return $this;
    }

    /**
     * Gets billing_plan
     *
     * @return string|null
     */
    public function getBillingPlan()
    {
        return $this->container['billing_plan'];
    }

    /**
     * Sets billing_plan
     *
     * @param string|null $billing_plan Billing Plan Number / Invoicing Plan Number
     *
     * @return self
     */
    public function setBillingPlan($billing_plan)
    {
        if (is_null($billing_plan)) {
            throw new \InvalidArgumentException('non-nullable billing_plan cannot be null');
        }
        if ((mb_strlen($billing_plan) > 10)) {
            throw new \InvalidArgumentException('invalid length for $billing_plan when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 10.');
        }

        $this->container['billing_plan'] = $billing_plan;

        return $this;
    }

    /**
     * Gets billing_plan_item
     *
     * @return string|null
     */
    public function getBillingPlanItem()
    {
        return $this->container['billing_plan_item'];
    }

    /**
     * Sets billing_plan_item
     *
     * @param string|null $billing_plan_item Item for billing plan/invoice plan/payment cards
     *
     * @return self
     */
    public function setBillingPlanItem($billing_plan_item)
    {
        if (is_null($billing_plan_item)) {
            throw new \InvalidArgumentException('non-nullable billing_plan_item cannot be null');
        }
        if ((mb_strlen($billing_plan_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $billing_plan_item when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 6.');
        }

        $this->container['billing_plan_item'] = $billing_plan_item;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\NetValue1|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\NetValue1|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets transaction_currency
     *
     * @return string|null
     */
    public function getTransactionCurrency()
    {
        return $this->container['transaction_currency'];
    }

    /**
     * Sets transaction_currency
     *
     * @param string|null $transaction_currency SD Document Currency
     *
     * @return self
     */
    public function setTransactionCurrency($transaction_currency)
    {
        if (is_null($transaction_currency)) {
            throw new \InvalidArgumentException('non-nullable transaction_currency cannot be null');
        }
        if ((mb_strlen($transaction_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $transaction_currency when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['transaction_currency'] = $transaction_currency;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\GrossValue|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\GrossValue|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets pricing_date
     *
     * @return \DateTime|null
     */
    public function getPricingDate()
    {
        return $this->container['pricing_date'];
    }

    /**
     * Sets pricing_date
     *
     * @param \DateTime|null $pricing_date Date for Pricing and Exchange Rate
     *
     * @return self
     */
    public function setPricingDate($pricing_date)
    {
        if (is_null($pricing_date)) {
            array_push($this->openAPINullablesSetToNull, 'pricing_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricing_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pricing_date'] = $pricing_date;

        return $this;
    }

    /**
     * Gets abslt_price_detn_exchange_rate
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\AbsExchRatePrc|null
     */
    public function getAbsltPriceDetnExchangeRate()
    {
        return $this->container['abslt_price_detn_exchange_rate'];
    }

    /**
     * Sets abslt_price_detn_exchange_rate
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\AbsExchRatePrc|null $abslt_price_detn_exchange_rate abslt_price_detn_exchange_rate
     *
     * @return self
     */
    public function setAbsltPriceDetnExchangeRate($abslt_price_detn_exchange_rate)
    {
        if (is_null($abslt_price_detn_exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable abslt_price_detn_exchange_rate cannot be null');
        }
        $this->container['abslt_price_detn_exchange_rate'] = $abslt_price_detn_exchange_rate;

        return $this;
    }

    /**
     * Gets price_detn_exch_rate_is_indrct_qtan
     *
     * @return bool|null
     */
    public function getPriceDetnExchRateIsIndrctQtan()
    {
        return $this->container['price_detn_exch_rate_is_indrct_qtan'];
    }

    /**
     * Sets price_detn_exch_rate_is_indrct_qtan
     *
     * @param bool|null $price_detn_exch_rate_is_indrct_qtan Pricing exchange rate quotation is indirect
     *
     * @return self
     */
    public function setPriceDetnExchRateIsIndrctQtan($price_detn_exch_rate_is_indrct_qtan)
    {
        if (is_null($price_detn_exch_rate_is_indrct_qtan)) {
            throw new \InvalidArgumentException('non-nullable price_detn_exch_rate_is_indrct_qtan cannot be null');
        }
        $this->container['price_detn_exch_rate_is_indrct_qtan'] = $price_detn_exch_rate_is_indrct_qtan;

        return $this;
    }

    /**
     * Gets price_detn_exchange_rate_date
     *
     * @return \DateTime|null
     */
    public function getPriceDetnExchangeRateDate()
    {
        return $this->container['price_detn_exchange_rate_date'];
    }

    /**
     * Sets price_detn_exchange_rate_date
     *
     * @param \DateTime|null $price_detn_exchange_rate_date price_detn_exchange_rate_date
     *
     * @return self
     */
    public function setPriceDetnExchangeRateDate($price_detn_exchange_rate_date)
    {
        if (is_null($price_detn_exchange_rate_date)) {
            array_push($this->openAPINullablesSetToNull, 'price_detn_exchange_rate_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_detn_exchange_rate_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_detn_exchange_rate_date'] = $price_detn_exchange_rate_date;

        return $this;
    }

    /**
     * Gets pricing_scale_quantity_in_base_unit
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\ScaleQuantity|null
     */
    public function getPricingScaleQuantityInBaseUnit()
    {
        return $this->container['pricing_scale_quantity_in_base_unit'];
    }

    /**
     * Sets pricing_scale_quantity_in_base_unit
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\ScaleQuantity|null $pricing_scale_quantity_in_base_unit pricing_scale_quantity_in_base_unit
     *
     * @return self
     */
    public function setPricingScaleQuantityInBaseUnit($pricing_scale_quantity_in_base_unit)
    {
        if (is_null($pricing_scale_quantity_in_base_unit)) {
            throw new \InvalidArgumentException('non-nullable pricing_scale_quantity_in_base_unit cannot be null');
        }
        $this->container['pricing_scale_quantity_in_base_unit'] = $pricing_scale_quantity_in_base_unit;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\TaxAmount|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\TaxAmount|null $tax_amount tax_amount
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            throw new \InvalidArgumentException('non-nullable tax_amount cannot be null');
        }
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets cost_amount
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\Cost|null
     */
    public function getCostAmount()
    {
        return $this->container['cost_amount'];
    }

    /**
     * Sets cost_amount
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\Cost|null $cost_amount cost_amount
     *
     * @return self
     */
    public function setCostAmount($cost_amount)
    {
        if (is_null($cost_amount)) {
            throw new \InvalidArgumentException('non-nullable cost_amount cannot be null');
        }
        $this->container['cost_amount'] = $cost_amount;

        return $this;
    }

    /**
     * Gets subtotal1_amount
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal1|null
     */
    public function getSubtotal1Amount()
    {
        return $this->container['subtotal1_amount'];
    }

    /**
     * Sets subtotal1_amount
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal1|null $subtotal1_amount subtotal1_amount
     *
     * @return self
     */
    public function setSubtotal1Amount($subtotal1_amount)
    {
        if (is_null($subtotal1_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal1_amount cannot be null');
        }
        $this->container['subtotal1_amount'] = $subtotal1_amount;

        return $this;
    }

    /**
     * Gets subtotal2_amount
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal2|null
     */
    public function getSubtotal2Amount()
    {
        return $this->container['subtotal2_amount'];
    }

    /**
     * Sets subtotal2_amount
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal2|null $subtotal2_amount subtotal2_amount
     *
     * @return self
     */
    public function setSubtotal2Amount($subtotal2_amount)
    {
        if (is_null($subtotal2_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal2_amount cannot be null');
        }
        $this->container['subtotal2_amount'] = $subtotal2_amount;

        return $this;
    }

    /**
     * Gets subtotal3_amount
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal3|null
     */
    public function getSubtotal3Amount()
    {
        return $this->container['subtotal3_amount'];
    }

    /**
     * Sets subtotal3_amount
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal3|null $subtotal3_amount subtotal3_amount
     *
     * @return self
     */
    public function setSubtotal3Amount($subtotal3_amount)
    {
        if (is_null($subtotal3_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal3_amount cannot be null');
        }
        $this->container['subtotal3_amount'] = $subtotal3_amount;

        return $this;
    }

    /**
     * Gets subtotal4_amount
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal4|null
     */
    public function getSubtotal4Amount()
    {
        return $this->container['subtotal4_amount'];
    }

    /**
     * Sets subtotal4_amount
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal4|null $subtotal4_amount subtotal4_amount
     *
     * @return self
     */
    public function setSubtotal4Amount($subtotal4_amount)
    {
        if (is_null($subtotal4_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal4_amount cannot be null');
        }
        $this->container['subtotal4_amount'] = $subtotal4_amount;

        return $this;
    }

    /**
     * Gets subtotal5_amount
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal5|null
     */
    public function getSubtotal5Amount()
    {
        return $this->container['subtotal5_amount'];
    }

    /**
     * Sets subtotal5_amount
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal5|null $subtotal5_amount subtotal5_amount
     *
     * @return self
     */
    public function setSubtotal5Amount($subtotal5_amount)
    {
        if (is_null($subtotal5_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal5_amount cannot be null');
        }
        $this->container['subtotal5_amount'] = $subtotal5_amount;

        return $this;
    }

    /**
     * Gets subtotal6_amount
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal6|null
     */
    public function getSubtotal6Amount()
    {
        return $this->container['subtotal6_amount'];
    }

    /**
     * Sets subtotal6_amount
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\Subtotal6|null $subtotal6_amount subtotal6_amount
     *
     * @return self
     */
    public function setSubtotal6Amount($subtotal6_amount)
    {
        if (is_null($subtotal6_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal6_amount cannot be null');
        }
        $this->container['subtotal6_amount'] = $subtotal6_amount;

        return $this;
    }

    /**
     * Gets statistical_value_control
     *
     * @return string|null
     */
    public function getStatisticalValueControl()
    {
        return $this->container['statistical_value_control'];
    }

    /**
     * Sets statistical_value_control
     *
     * @param string|null $statistical_value_control Statistical Values
     *
     * @return self
     */
    public function setStatisticalValueControl($statistical_value_control)
    {
        if (is_null($statistical_value_control)) {
            throw new \InvalidArgumentException('non-nullable statistical_value_control cannot be null');
        }
        if ((mb_strlen($statistical_value_control) > 1)) {
            throw new \InvalidArgumentException('invalid length for $statistical_value_control when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['statistical_value_control'] = $statistical_value_control;

        return $this;
    }

    /**
     * Gets cash_discount_is_deductible
     *
     * @return bool|null
     */
    public function getCashDiscountIsDeductible()
    {
        return $this->container['cash_discount_is_deductible'];
    }

    /**
     * Sets cash_discount_is_deductible
     *
     * @param bool|null $cash_discount_is_deductible Cash Discount Indicator
     *
     * @return self
     */
    public function setCashDiscountIsDeductible($cash_discount_is_deductible)
    {
        if (is_null($cash_discount_is_deductible)) {
            throw new \InvalidArgumentException('non-nullable cash_discount_is_deductible cannot be null');
        }
        $this->container['cash_discount_is_deductible'] = $cash_discount_is_deductible;

        return $this;
    }

    /**
     * Gets customer_condition_group1
     *
     * @return string|null
     */
    public function getCustomerConditionGroup1()
    {
        return $this->container['customer_condition_group1'];
    }

    /**
     * Sets customer_condition_group1
     *
     * @param string|null $customer_condition_group1 Customer Condition Group 1
     *
     * @return self
     */
    public function setCustomerConditionGroup1($customer_condition_group1)
    {
        if (is_null($customer_condition_group1)) {
            throw new \InvalidArgumentException('non-nullable customer_condition_group1 cannot be null');
        }
        if ((mb_strlen($customer_condition_group1) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_condition_group1 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 2.');
        }

        $this->container['customer_condition_group1'] = $customer_condition_group1;

        return $this;
    }

    /**
     * Gets customer_condition_group2
     *
     * @return string|null
     */
    public function getCustomerConditionGroup2()
    {
        return $this->container['customer_condition_group2'];
    }

    /**
     * Sets customer_condition_group2
     *
     * @param string|null $customer_condition_group2 Customer Condition Group 2
     *
     * @return self
     */
    public function setCustomerConditionGroup2($customer_condition_group2)
    {
        if (is_null($customer_condition_group2)) {
            throw new \InvalidArgumentException('non-nullable customer_condition_group2 cannot be null');
        }
        if ((mb_strlen($customer_condition_group2) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_condition_group2 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 2.');
        }

        $this->container['customer_condition_group2'] = $customer_condition_group2;

        return $this;
    }

    /**
     * Gets customer_condition_group3
     *
     * @return string|null
     */
    public function getCustomerConditionGroup3()
    {
        return $this->container['customer_condition_group3'];
    }

    /**
     * Sets customer_condition_group3
     *
     * @param string|null $customer_condition_group3 Customer Condition Group 3
     *
     * @return self
     */
    public function setCustomerConditionGroup3($customer_condition_group3)
    {
        if (is_null($customer_condition_group3)) {
            throw new \InvalidArgumentException('non-nullable customer_condition_group3 cannot be null');
        }
        if ((mb_strlen($customer_condition_group3) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_condition_group3 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 2.');
        }

        $this->container['customer_condition_group3'] = $customer_condition_group3;

        return $this;
    }

    /**
     * Gets customer_condition_group4
     *
     * @return string|null
     */
    public function getCustomerConditionGroup4()
    {
        return $this->container['customer_condition_group4'];
    }

    /**
     * Sets customer_condition_group4
     *
     * @param string|null $customer_condition_group4 Customer Condition Group 4
     *
     * @return self
     */
    public function setCustomerConditionGroup4($customer_condition_group4)
    {
        if (is_null($customer_condition_group4)) {
            throw new \InvalidArgumentException('non-nullable customer_condition_group4 cannot be null');
        }
        if ((mb_strlen($customer_condition_group4) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_condition_group4 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 2.');
        }

        $this->container['customer_condition_group4'] = $customer_condition_group4;

        return $this;
    }

    /**
     * Gets customer_condition_group5
     *
     * @return string|null
     */
    public function getCustomerConditionGroup5()
    {
        return $this->container['customer_condition_group5'];
    }

    /**
     * Sets customer_condition_group5
     *
     * @param string|null $customer_condition_group5 Customer Condition Group 5
     *
     * @return self
     */
    public function setCustomerConditionGroup5($customer_condition_group5)
    {
        if (is_null($customer_condition_group5)) {
            throw new \InvalidArgumentException('non-nullable customer_condition_group5 cannot be null');
        }
        if ((mb_strlen($customer_condition_group5) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_condition_group5 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 2.');
        }

        $this->container['customer_condition_group5'] = $customer_condition_group5;

        return $this;
    }

    /**
     * Gets manual_price_change_type
     *
     * @return string|null
     */
    public function getManualPriceChangeType()
    {
        return $this->container['manual_price_change_type'];
    }

    /**
     * Sets manual_price_change_type
     *
     * @param string|null $manual_price_change_type Status manual price change
     *
     * @return self
     */
    public function setManualPriceChangeType($manual_price_change_type)
    {
        if (is_null($manual_price_change_type)) {
            throw new \InvalidArgumentException('non-nullable manual_price_change_type cannot be null');
        }
        if ((mb_strlen($manual_price_change_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $manual_price_change_type when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['manual_price_change_type'] = $manual_price_change_type;

        return $this;
    }

    /**
     * Gets material_pricing_group
     *
     * @return string|null
     */
    public function getMaterialPricingGroup()
    {
        return $this->container['material_pricing_group'];
    }

    /**
     * Sets material_pricing_group
     *
     * @param string|null $material_pricing_group Material Price Group
     *
     * @return self
     */
    public function setMaterialPricingGroup($material_pricing_group)
    {
        if (is_null($material_pricing_group)) {
            throw new \InvalidArgumentException('non-nullable material_pricing_group cannot be null');
        }
        if ((mb_strlen($material_pricing_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $material_pricing_group when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 2.');
        }

        $this->container['material_pricing_group'] = $material_pricing_group;

        return $this;
    }

    /**
     * Gets abslt_statistics_exchange_rate
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\AbsExchRateStats|null
     */
    public function getAbsltStatisticsExchangeRate()
    {
        return $this->container['abslt_statistics_exchange_rate'];
    }

    /**
     * Sets abslt_statistics_exchange_rate
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\AbsExchRateStats|null $abslt_statistics_exchange_rate abslt_statistics_exchange_rate
     *
     * @return self
     */
    public function setAbsltStatisticsExchangeRate($abslt_statistics_exchange_rate)
    {
        if (is_null($abslt_statistics_exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable abslt_statistics_exchange_rate cannot be null');
        }
        $this->container['abslt_statistics_exchange_rate'] = $abslt_statistics_exchange_rate;

        return $this;
    }

    /**
     * Gets statistics_exch_rate_is_indrct_qtan
     *
     * @return bool|null
     */
    public function getStatisticsExchRateIsIndrctQtan()
    {
        return $this->container['statistics_exch_rate_is_indrct_qtan'];
    }

    /**
     * Sets statistics_exch_rate_is_indrct_qtan
     *
     * @param bool|null $statistics_exch_rate_is_indrct_qtan Statistics exchange rate quotation is indirect
     *
     * @return self
     */
    public function setStatisticsExchRateIsIndrctQtan($statistics_exch_rate_is_indrct_qtan)
    {
        if (is_null($statistics_exch_rate_is_indrct_qtan)) {
            throw new \InvalidArgumentException('non-nullable statistics_exch_rate_is_indrct_qtan cannot be null');
        }
        $this->container['statistics_exch_rate_is_indrct_qtan'] = $statistics_exch_rate_is_indrct_qtan;

        return $this;
    }

    /**
     * Gets main_item_pricing_ref_material
     *
     * @return string|null
     */
    public function getMainItemPricingRefMaterial()
    {
        return $this->container['main_item_pricing_ref_material'];
    }

    /**
     * Sets main_item_pricing_ref_material
     *
     * @param string|null $main_item_pricing_ref_material Pricing reference material of main item
     *
     * @return self
     */
    public function setMainItemPricingRefMaterial($main_item_pricing_ref_material)
    {
        if (is_null($main_item_pricing_ref_material)) {
            throw new \InvalidArgumentException('non-nullable main_item_pricing_ref_material cannot be null');
        }
        if ((mb_strlen($main_item_pricing_ref_material) > 18)) {
            throw new \InvalidArgumentException('invalid length for $main_item_pricing_ref_material when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 18.');
        }

        $this->container['main_item_pricing_ref_material'] = $main_item_pricing_ref_material;

        return $this;
    }

    /**
     * Gets main_item_material_pricing_group
     *
     * @return string|null
     */
    public function getMainItemMaterialPricingGroup()
    {
        return $this->container['main_item_material_pricing_group'];
    }

    /**
     * Sets main_item_material_pricing_group
     *
     * @param string|null $main_item_material_pricing_group Material pricing group of main item
     *
     * @return self
     */
    public function setMainItemMaterialPricingGroup($main_item_material_pricing_group)
    {
        if (is_null($main_item_material_pricing_group)) {
            throw new \InvalidArgumentException('non-nullable main_item_material_pricing_group cannot be null');
        }
        if ((mb_strlen($main_item_material_pricing_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $main_item_material_pricing_group when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 2.');
        }

        $this->container['main_item_material_pricing_group'] = $main_item_material_pricing_group;

        return $this;
    }

    /**
     * Gets time_sheet_overtime_category
     *
     * @return string|null
     */
    public function getTimeSheetOvertimeCategory()
    {
        return $this->container['time_sheet_overtime_category'];
    }

    /**
     * Sets time_sheet_overtime_category
     *
     * @param string|null $time_sheet_overtime_category time_sheet_overtime_category
     *
     * @return self
     */
    public function setTimeSheetOvertimeCategory($time_sheet_overtime_category)
    {
        if (is_null($time_sheet_overtime_category)) {
            throw new \InvalidArgumentException('non-nullable time_sheet_overtime_category cannot be null');
        }
        if ((mb_strlen($time_sheet_overtime_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $time_sheet_overtime_category when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['time_sheet_overtime_category'] = $time_sheet_overtime_category;

        return $this;
    }

    /**
     * Gets departure_country
     *
     * @return string|null
     */
    public function getDepartureCountry()
    {
        return $this->container['departure_country'];
    }

    /**
     * Sets departure_country
     *
     * @param string|null $departure_country Departure Country/Region (from which the goods are sent)
     *
     * @return self
     */
    public function setDepartureCountry($departure_country)
    {
        if (is_null($departure_country)) {
            throw new \InvalidArgumentException('non-nullable departure_country cannot be null');
        }
        if ((mb_strlen($departure_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $departure_country when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['departure_country'] = $departure_country;

        return $this;
    }

    /**
     * Gets tax_jurisdiction
     *
     * @return string|null
     */
    public function getTaxJurisdiction()
    {
        return $this->container['tax_jurisdiction'];
    }

    /**
     * Sets tax_jurisdiction
     *
     * @param string|null $tax_jurisdiction tax_jurisdiction
     *
     * @return self
     */
    public function setTaxJurisdiction($tax_jurisdiction)
    {
        if (is_null($tax_jurisdiction)) {
            throw new \InvalidArgumentException('non-nullable tax_jurisdiction cannot be null');
        }
        if ((mb_strlen($tax_jurisdiction) > 15)) {
            throw new \InvalidArgumentException('invalid length for $tax_jurisdiction when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 15.');
        }

        $this->container['tax_jurisdiction'] = $tax_jurisdiction;

        return $this;
    }

    /**
     * Gets product_tax_classification1
     *
     * @return string|null
     */
    public function getProductTaxClassification1()
    {
        return $this->container['product_tax_classification1'];
    }

    /**
     * Sets product_tax_classification1
     *
     * @param string|null $product_tax_classification1 Tax Classification of Material
     *
     * @return self
     */
    public function setProductTaxClassification1($product_tax_classification1)
    {
        if (is_null($product_tax_classification1)) {
            throw new \InvalidArgumentException('non-nullable product_tax_classification1 cannot be null');
        }
        if ((mb_strlen($product_tax_classification1) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification1 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification1'] = $product_tax_classification1;

        return $this;
    }

    /**
     * Gets product_tax_classification2
     *
     * @return string|null
     */
    public function getProductTaxClassification2()
    {
        return $this->container['product_tax_classification2'];
    }

    /**
     * Sets product_tax_classification2
     *
     * @param string|null $product_tax_classification2 Tax Classification 2 for Material
     *
     * @return self
     */
    public function setProductTaxClassification2($product_tax_classification2)
    {
        if (is_null($product_tax_classification2)) {
            throw new \InvalidArgumentException('non-nullable product_tax_classification2 cannot be null');
        }
        if ((mb_strlen($product_tax_classification2) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification2 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification2'] = $product_tax_classification2;

        return $this;
    }

    /**
     * Gets product_tax_classification3
     *
     * @return string|null
     */
    public function getProductTaxClassification3()
    {
        return $this->container['product_tax_classification3'];
    }

    /**
     * Sets product_tax_classification3
     *
     * @param string|null $product_tax_classification3 Tax Classification 3 for Material
     *
     * @return self
     */
    public function setProductTaxClassification3($product_tax_classification3)
    {
        if (is_null($product_tax_classification3)) {
            throw new \InvalidArgumentException('non-nullable product_tax_classification3 cannot be null');
        }
        if ((mb_strlen($product_tax_classification3) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification3 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification3'] = $product_tax_classification3;

        return $this;
    }

    /**
     * Gets product_tax_classification4
     *
     * @return string|null
     */
    public function getProductTaxClassification4()
    {
        return $this->container['product_tax_classification4'];
    }

    /**
     * Sets product_tax_classification4
     *
     * @param string|null $product_tax_classification4 Tax Classification 4 for Material
     *
     * @return self
     */
    public function setProductTaxClassification4($product_tax_classification4)
    {
        if (is_null($product_tax_classification4)) {
            throw new \InvalidArgumentException('non-nullable product_tax_classification4 cannot be null');
        }
        if ((mb_strlen($product_tax_classification4) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification4 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification4'] = $product_tax_classification4;

        return $this;
    }

    /**
     * Gets product_tax_classification5
     *
     * @return string|null
     */
    public function getProductTaxClassification5()
    {
        return $this->container['product_tax_classification5'];
    }

    /**
     * Sets product_tax_classification5
     *
     * @param string|null $product_tax_classification5 Tax Classification 5 for Material
     *
     * @return self
     */
    public function setProductTaxClassification5($product_tax_classification5)
    {
        if (is_null($product_tax_classification5)) {
            throw new \InvalidArgumentException('non-nullable product_tax_classification5 cannot be null');
        }
        if ((mb_strlen($product_tax_classification5) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification5 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification5'] = $product_tax_classification5;

        return $this;
    }

    /**
     * Gets product_tax_classification6
     *
     * @return string|null
     */
    public function getProductTaxClassification6()
    {
        return $this->container['product_tax_classification6'];
    }

    /**
     * Sets product_tax_classification6
     *
     * @param string|null $product_tax_classification6 Tax Classification 6 for Material
     *
     * @return self
     */
    public function setProductTaxClassification6($product_tax_classification6)
    {
        if (is_null($product_tax_classification6)) {
            throw new \InvalidArgumentException('non-nullable product_tax_classification6 cannot be null');
        }
        if ((mb_strlen($product_tax_classification6) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification6 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification6'] = $product_tax_classification6;

        return $this;
    }

    /**
     * Gets product_tax_classification7
     *
     * @return string|null
     */
    public function getProductTaxClassification7()
    {
        return $this->container['product_tax_classification7'];
    }

    /**
     * Sets product_tax_classification7
     *
     * @param string|null $product_tax_classification7 Tax Classification 7 for Material
     *
     * @return self
     */
    public function setProductTaxClassification7($product_tax_classification7)
    {
        if (is_null($product_tax_classification7)) {
            throw new \InvalidArgumentException('non-nullable product_tax_classification7 cannot be null');
        }
        if ((mb_strlen($product_tax_classification7) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification7 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification7'] = $product_tax_classification7;

        return $this;
    }

    /**
     * Gets product_tax_classification8
     *
     * @return string|null
     */
    public function getProductTaxClassification8()
    {
        return $this->container['product_tax_classification8'];
    }

    /**
     * Sets product_tax_classification8
     *
     * @param string|null $product_tax_classification8 Tax Classification 8 for Material
     *
     * @return self
     */
    public function setProductTaxClassification8($product_tax_classification8)
    {
        if (is_null($product_tax_classification8)) {
            throw new \InvalidArgumentException('non-nullable product_tax_classification8 cannot be null');
        }
        if ((mb_strlen($product_tax_classification8) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification8 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification8'] = $product_tax_classification8;

        return $this;
    }

    /**
     * Gets product_tax_classification9
     *
     * @return string|null
     */
    public function getProductTaxClassification9()
    {
        return $this->container['product_tax_classification9'];
    }

    /**
     * Sets product_tax_classification9
     *
     * @param string|null $product_tax_classification9 Tax Classification 9 for Material
     *
     * @return self
     */
    public function setProductTaxClassification9($product_tax_classification9)
    {
        if (is_null($product_tax_classification9)) {
            throw new \InvalidArgumentException('non-nullable product_tax_classification9 cannot be null');
        }
        if ((mb_strlen($product_tax_classification9) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification9 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification9'] = $product_tax_classification9;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string|null
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string|null $tax_code Tax on Sales/Purchases Code
     *
     * @return self
     */
    public function setTaxCode($tax_code)
    {
        if (is_null($tax_code)) {
            throw new \InvalidArgumentException('non-nullable tax_code cannot be null');
        }
        if ((mb_strlen($tax_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $tax_code when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 2.');
        }

        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets tax_rate_validity_start_date
     *
     * @return \DateTime|null
     */
    public function getTaxRateValidityStartDate()
    {
        return $this->container['tax_rate_validity_start_date'];
    }

    /**
     * Sets tax_rate_validity_start_date
     *
     * @param \DateTime|null $tax_rate_validity_start_date Valid-From Date of the Tax Rate
     *
     * @return self
     */
    public function setTaxRateValidityStartDate($tax_rate_validity_start_date)
    {
        if (is_null($tax_rate_validity_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'tax_rate_validity_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_rate_validity_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_rate_validity_start_date'] = $tax_rate_validity_start_date;

        return $this;
    }

    /**
     * Gets eligible_amount_for_cash_discount
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\CashDiscBas|null
     */
    public function getEligibleAmountForCashDiscount()
    {
        return $this->container['eligible_amount_for_cash_discount'];
    }

    /**
     * Sets eligible_amount_for_cash_discount
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\CashDiscBas|null $eligible_amount_for_cash_discount eligible_amount_for_cash_discount
     *
     * @return self
     */
    public function setEligibleAmountForCashDiscount($eligible_amount_for_cash_discount)
    {
        if (is_null($eligible_amount_for_cash_discount)) {
            throw new \InvalidArgumentException('non-nullable eligible_amount_for_cash_discount cannot be null');
        }
        $this->container['eligible_amount_for_cash_discount'] = $eligible_amount_for_cash_discount;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return string|null
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param string|null $business_area business_area
     *
     * @return self
     */
    public function setBusinessArea($business_area)
    {
        if (is_null($business_area)) {
            throw new \InvalidArgumentException('non-nullable business_area cannot be null');
        }
        if ((mb_strlen($business_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $business_area when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets profit_center
     *
     * @return string|null
     */
    public function getProfitCenter()
    {
        return $this->container['profit_center'];
    }

    /**
     * Sets profit_center
     *
     * @param string|null $profit_center profit_center
     *
     * @return self
     */
    public function setProfitCenter($profit_center)
    {
        if (is_null($profit_center)) {
            throw new \InvalidArgumentException('non-nullable profit_center cannot be null');
        }
        if ((mb_strlen($profit_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profit_center when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 10.');
        }

        $this->container['profit_center'] = $profit_center;

        return $this;
    }

    /**
     * Gets wbs_element_external_id
     *
     * @return string|null
     */
    public function getWbsElementExternalId()
    {
        return $this->container['wbs_element_external_id'];
    }

    /**
     * Sets wbs_element_external_id
     *
     * @param string|null $wbs_element_external_id Work Breakdown Structure Element (WBS Element) Edited
     *
     * @return self
     */
    public function setWbsElementExternalId($wbs_element_external_id)
    {
        if (is_null($wbs_element_external_id)) {
            throw new \InvalidArgumentException('non-nullable wbs_element_external_id cannot be null');
        }
        if ((mb_strlen($wbs_element_external_id) > 24)) {
            throw new \InvalidArgumentException('invalid length for $wbs_element_external_id when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 24.');
        }

        $this->container['wbs_element_external_id'] = $wbs_element_external_id;

        return $this;
    }

    /**
     * Gets provider_contract
     *
     * @return string|null
     */
    public function getProviderContract()
    {
        return $this->container['provider_contract'];
    }

    /**
     * Sets provider_contract
     *
     * @param string|null $provider_contract Identification of a Provider Contract
     *
     * @return self
     */
    public function setProviderContract($provider_contract)
    {
        if (is_null($provider_contract)) {
            throw new \InvalidArgumentException('non-nullable provider_contract cannot be null');
        }
        if ((mb_strlen($provider_contract) > 20)) {
            throw new \InvalidArgumentException('invalid length for $provider_contract when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 20.');
        }

        $this->container['provider_contract'] = $provider_contract;

        return $this;
    }

    /**
     * Gets provider_contract_item
     *
     * @return string|null
     */
    public function getProviderContractItem()
    {
        return $this->container['provider_contract_item'];
    }

    /**
     * Sets provider_contract_item
     *
     * @param string|null $provider_contract_item provider_contract_item
     *
     * @return self
     */
    public function setProviderContractItem($provider_contract_item)
    {
        if (is_null($provider_contract_item)) {
            throw new \InvalidArgumentException('non-nullable provider_contract_item cannot be null');
        }
        if ((mb_strlen($provider_contract_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $provider_contract_item when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 6.');
        }

        $this->container['provider_contract_item'] = $provider_contract_item;

        return $this;
    }

    /**
     * Gets billing_period_of_perf_start_date
     *
     * @return \DateTime|null
     */
    public function getBillingPeriodOfPerfStartDate()
    {
        return $this->container['billing_period_of_perf_start_date'];
    }

    /**
     * Sets billing_period_of_perf_start_date
     *
     * @param \DateTime|null $billing_period_of_perf_start_date Period of Performance Start Date
     *
     * @return self
     */
    public function setBillingPeriodOfPerfStartDate($billing_period_of_perf_start_date)
    {
        if (is_null($billing_period_of_perf_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'billing_period_of_perf_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_period_of_perf_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_period_of_perf_start_date'] = $billing_period_of_perf_start_date;

        return $this;
    }

    /**
     * Gets billing_period_of_perf_end_date
     *
     * @return \DateTime|null
     */
    public function getBillingPeriodOfPerfEndDate()
    {
        return $this->container['billing_period_of_perf_end_date'];
    }

    /**
     * Sets billing_period_of_perf_end_date
     *
     * @param \DateTime|null $billing_period_of_perf_end_date Period of Performance End Date
     *
     * @return self
     */
    public function setBillingPeriodOfPerfEndDate($billing_period_of_perf_end_date)
    {
        if (is_null($billing_period_of_perf_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'billing_period_of_perf_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_period_of_perf_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_period_of_perf_end_date'] = $billing_period_of_perf_end_date;

        return $this;
    }

    /**
     * Gets controlling_area
     *
     * @return string|null
     */
    public function getControllingArea()
    {
        return $this->container['controlling_area'];
    }

    /**
     * Sets controlling_area
     *
     * @param string|null $controlling_area controlling_area
     *
     * @return self
     */
    public function setControllingArea($controlling_area)
    {
        if (is_null($controlling_area)) {
            throw new \InvalidArgumentException('non-nullable controlling_area cannot be null');
        }
        if ((mb_strlen($controlling_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $controlling_area when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['controlling_area'] = $controlling_area;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return string|null
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param string|null $cost_center cost_center
     *
     * @return self
     */
    public function setCostCenter($cost_center)
    {
        if (is_null($cost_center)) {
            throw new \InvalidArgumentException('non-nullable cost_center cannot be null');
        }
        if ((mb_strlen($cost_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $cost_center when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 10.');
        }

        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets matl_account_assignment_group
     *
     * @return string|null
     */
    public function getMatlAccountAssignmentGroup()
    {
        return $this->container['matl_account_assignment_group'];
    }

    /**
     * Sets matl_account_assignment_group
     *
     * @param string|null $matl_account_assignment_group Account Assignment Group for Material
     *
     * @return self
     */
    public function setMatlAccountAssignmentGroup($matl_account_assignment_group)
    {
        if (is_null($matl_account_assignment_group)) {
            throw new \InvalidArgumentException('non-nullable matl_account_assignment_group cannot be null');
        }
        if ((mb_strlen($matl_account_assignment_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $matl_account_assignment_group when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 2.');
        }

        $this->container['matl_account_assignment_group'] = $matl_account_assignment_group;

        return $this;
    }

    /**
     * Gets reference_sd_document
     *
     * @return string|null
     */
    public function getReferenceSdDocument()
    {
        return $this->container['reference_sd_document'];
    }

    /**
     * Sets reference_sd_document
     *
     * @param string|null $reference_sd_document Document Number of Reference Document
     *
     * @return self
     */
    public function setReferenceSdDocument($reference_sd_document)
    {
        if (is_null($reference_sd_document)) {
            throw new \InvalidArgumentException('non-nullable reference_sd_document cannot be null');
        }
        if ((mb_strlen($reference_sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 10.');
        }

        $this->container['reference_sd_document'] = $reference_sd_document;

        return $this;
    }

    /**
     * Gets reference_sd_document_item
     *
     * @return string|null
     */
    public function getReferenceSdDocumentItem()
    {
        return $this->container['reference_sd_document_item'];
    }

    /**
     * Sets reference_sd_document_item
     *
     * @param string|null $reference_sd_document_item Item Number of the Reference Item
     *
     * @return self
     */
    public function setReferenceSdDocumentItem($reference_sd_document_item)
    {
        if (is_null($reference_sd_document_item)) {
            throw new \InvalidArgumentException('non-nullable reference_sd_document_item cannot be null');
        }
        if ((mb_strlen($reference_sd_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_item when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 6.');
        }

        $this->container['reference_sd_document_item'] = $reference_sd_document_item;

        return $this;
    }

    /**
     * Gets reference_sd_document_category
     *
     * @return string|null
     */
    public function getReferenceSdDocumentCategory()
    {
        return $this->container['reference_sd_document_category'];
    }

    /**
     * Sets reference_sd_document_category
     *
     * @param string|null $reference_sd_document_category Reference Document Category
     *
     * @return self
     */
    public function setReferenceSdDocumentCategory($reference_sd_document_category)
    {
        if (is_null($reference_sd_document_category)) {
            throw new \InvalidArgumentException('non-nullable reference_sd_document_category cannot be null');
        }
        if ((mb_strlen($reference_sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_category when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['reference_sd_document_category'] = $reference_sd_document_category;

        return $this;
    }

    /**
     * Gets sales_document
     *
     * @return string|null
     */
    public function getSalesDocument()
    {
        return $this->container['sales_document'];
    }

    /**
     * Sets sales_document
     *
     * @param string|null $sales_document sales_document
     *
     * @return self
     */
    public function setSalesDocument($sales_document)
    {
        if (is_null($sales_document)) {
            throw new \InvalidArgumentException('non-nullable sales_document cannot be null');
        }
        if ((mb_strlen($sales_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_document when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 10.');
        }

        $this->container['sales_document'] = $sales_document;

        return $this;
    }

    /**
     * Gets sales_document_item
     *
     * @return string|null
     */
    public function getSalesDocumentItem()
    {
        return $this->container['sales_document_item'];
    }

    /**
     * Sets sales_document_item
     *
     * @param string|null $sales_document_item sales_document_item
     *
     * @return self
     */
    public function setSalesDocumentItem($sales_document_item)
    {
        if (is_null($sales_document_item)) {
            throw new \InvalidArgumentException('non-nullable sales_document_item cannot be null');
        }
        if ((mb_strlen($sales_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_item when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 6.');
        }

        $this->container['sales_document_item'] = $sales_document_item;

        return $this;
    }

    /**
     * Gets sales_sd_document_category
     *
     * @return string|null
     */
    public function getSalesSdDocumentCategory()
    {
        return $this->container['sales_sd_document_category'];
    }

    /**
     * Sets sales_sd_document_category
     *
     * @param string|null $sales_sd_document_category Sales Document Category
     *
     * @return self
     */
    public function setSalesSdDocumentCategory($sales_sd_document_category)
    {
        if (is_null($sales_sd_document_category)) {
            throw new \InvalidArgumentException('non-nullable sales_sd_document_category cannot be null');
        }
        if ((mb_strlen($sales_sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_sd_document_category when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['sales_sd_document_category'] = $sales_sd_document_category;

        return $this;
    }

    /**
     * Gets higher_level_item
     *
     * @return string|null
     */
    public function getHigherLevelItem()
    {
        return $this->container['higher_level_item'];
    }

    /**
     * Sets higher_level_item
     *
     * @param string|null $higher_level_item Higher-Level Item in Bill of Material Structures
     *
     * @return self
     */
    public function setHigherLevelItem($higher_level_item)
    {
        if (is_null($higher_level_item)) {
            array_push($this->openAPINullablesSetToNull, 'higher_level_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('higher_level_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($higher_level_item) && (mb_strlen($higher_level_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $higher_level_item when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 6.');
        }

        $this->container['higher_level_item'] = $higher_level_item;

        return $this;
    }

    /**
     * Gets billing_document_item_in_part_sgmt
     *
     * @return string|null
     */
    public function getBillingDocumentItemInPartSgmt()
    {
        return $this->container['billing_document_item_in_part_sgmt'];
    }

    /**
     * Sets billing_document_item_in_part_sgmt
     *
     * @param string|null $billing_document_item_in_part_sgmt Item Number in the Partner Segment
     *
     * @return self
     */
    public function setBillingDocumentItemInPartSgmt($billing_document_item_in_part_sgmt)
    {
        if (is_null($billing_document_item_in_part_sgmt)) {
            throw new \InvalidArgumentException('non-nullable billing_document_item_in_part_sgmt cannot be null');
        }
        if ((mb_strlen($billing_document_item_in_part_sgmt) > 6)) {
            throw new \InvalidArgumentException('invalid length for $billing_document_item_in_part_sgmt when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 6.');
        }

        $this->container['billing_document_item_in_part_sgmt'] = $billing_document_item_in_part_sgmt;

        return $this;
    }

    /**
     * Gets sales_group
     *
     * @return string|null
     */
    public function getSalesGroup()
    {
        return $this->container['sales_group'];
    }

    /**
     * Sets sales_group
     *
     * @param string|null $sales_group sales_group
     *
     * @return self
     */
    public function setSalesGroup($sales_group)
    {
        if (is_null($sales_group)) {
            throw new \InvalidArgumentException('non-nullable sales_group cannot be null');
        }
        if ((mb_strlen($sales_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sales_group when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['sales_group'] = $sales_group;

        return $this;
    }

    /**
     * Gets additional_customer_group1
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup1()
    {
        return $this->container['additional_customer_group1'];
    }

    /**
     * Sets additional_customer_group1
     *
     * @param string|null $additional_customer_group1 additional_customer_group1
     *
     * @return self
     */
    public function setAdditionalCustomerGroup1($additional_customer_group1)
    {
        if (is_null($additional_customer_group1)) {
            throw new \InvalidArgumentException('non-nullable additional_customer_group1 cannot be null');
        }
        if ((mb_strlen($additional_customer_group1) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group1 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group1'] = $additional_customer_group1;

        return $this;
    }

    /**
     * Gets additional_customer_group2
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup2()
    {
        return $this->container['additional_customer_group2'];
    }

    /**
     * Sets additional_customer_group2
     *
     * @param string|null $additional_customer_group2 additional_customer_group2
     *
     * @return self
     */
    public function setAdditionalCustomerGroup2($additional_customer_group2)
    {
        if (is_null($additional_customer_group2)) {
            throw new \InvalidArgumentException('non-nullable additional_customer_group2 cannot be null');
        }
        if ((mb_strlen($additional_customer_group2) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group2 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group2'] = $additional_customer_group2;

        return $this;
    }

    /**
     * Gets additional_customer_group3
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup3()
    {
        return $this->container['additional_customer_group3'];
    }

    /**
     * Sets additional_customer_group3
     *
     * @param string|null $additional_customer_group3 additional_customer_group3
     *
     * @return self
     */
    public function setAdditionalCustomerGroup3($additional_customer_group3)
    {
        if (is_null($additional_customer_group3)) {
            throw new \InvalidArgumentException('non-nullable additional_customer_group3 cannot be null');
        }
        if ((mb_strlen($additional_customer_group3) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group3 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group3'] = $additional_customer_group3;

        return $this;
    }

    /**
     * Gets additional_customer_group4
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup4()
    {
        return $this->container['additional_customer_group4'];
    }

    /**
     * Sets additional_customer_group4
     *
     * @param string|null $additional_customer_group4 additional_customer_group4
     *
     * @return self
     */
    public function setAdditionalCustomerGroup4($additional_customer_group4)
    {
        if (is_null($additional_customer_group4)) {
            throw new \InvalidArgumentException('non-nullable additional_customer_group4 cannot be null');
        }
        if ((mb_strlen($additional_customer_group4) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group4 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group4'] = $additional_customer_group4;

        return $this;
    }

    /**
     * Gets additional_customer_group5
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup5()
    {
        return $this->container['additional_customer_group5'];
    }

    /**
     * Sets additional_customer_group5
     *
     * @param string|null $additional_customer_group5 additional_customer_group5
     *
     * @return self
     */
    public function setAdditionalCustomerGroup5($additional_customer_group5)
    {
        if (is_null($additional_customer_group5)) {
            throw new \InvalidArgumentException('non-nullable additional_customer_group5 cannot be null');
        }
        if ((mb_strlen($additional_customer_group5) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group5 when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group5'] = $additional_customer_group5;

        return $this;
    }

    /**
     * Gets sd_document_reason
     *
     * @return string|null
     */
    public function getSdDocumentReason()
    {
        return $this->container['sd_document_reason'];
    }

    /**
     * Sets sd_document_reason
     *
     * @param string|null $sd_document_reason Order Reason (Reason for the Business Transaction)
     *
     * @return self
     */
    public function setSdDocumentReason($sd_document_reason)
    {
        if (is_null($sd_document_reason)) {
            throw new \InvalidArgumentException('non-nullable sd_document_reason cannot be null');
        }
        if ((mb_strlen($sd_document_reason) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sd_document_reason when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 3.');
        }

        $this->container['sd_document_reason'] = $sd_document_reason;

        return $this;
    }

    /**
     * Gets item_is_relevant_for_credit
     *
     * @return bool|null
     */
    public function getItemIsRelevantForCredit()
    {
        return $this->container['item_is_relevant_for_credit'];
    }

    /**
     * Sets item_is_relevant_for_credit
     *
     * @param bool|null $item_is_relevant_for_credit ID: Item with active credit function / relevant for credit
     *
     * @return self
     */
    public function setItemIsRelevantForCredit($item_is_relevant_for_credit)
    {
        if (is_null($item_is_relevant_for_credit)) {
            throw new \InvalidArgumentException('non-nullable item_is_relevant_for_credit cannot be null');
        }
        $this->container['item_is_relevant_for_credit'] = $item_is_relevant_for_credit;

        return $this;
    }

    /**
     * Gets credit_related_price
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\CreditPrice|null
     */
    public function getCreditRelatedPrice()
    {
        return $this->container['credit_related_price'];
    }

    /**
     * Sets credit_related_price
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\CreditPrice|null $credit_related_price credit_related_price
     *
     * @return self
     */
    public function setCreditRelatedPrice($credit_related_price)
    {
        if (is_null($credit_related_price)) {
            throw new \InvalidArgumentException('non-nullable credit_related_price cannot be null');
        }
        $this->container['credit_related_price'] = $credit_related_price;

        return $this;
    }

    /**
     * Gets shipping_point
     *
     * @return string|null
     */
    public function getShippingPoint()
    {
        return $this->container['shipping_point'];
    }

    /**
     * Sets shipping_point
     *
     * @param string|null $shipping_point Shipping Point / Receiving Point
     *
     * @return self
     */
    public function setShippingPoint($shipping_point)
    {
        if (is_null($shipping_point)) {
            throw new \InvalidArgumentException('non-nullable shipping_point cannot be null');
        }
        if ((mb_strlen($shipping_point) > 4)) {
            throw new \InvalidArgumentException('invalid length for $shipping_point when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['shipping_point'] = $shipping_point;

        return $this;
    }

    /**
     * Gets service_document_type
     *
     * @return string|null
     */
    public function getServiceDocumentType()
    {
        return $this->container['service_document_type'];
    }

    /**
     * Sets service_document_type
     *
     * @param string|null $service_document_type Service Document Type
     *
     * @return self
     */
    public function setServiceDocumentType($service_document_type)
    {
        if (is_null($service_document_type)) {
            throw new \InvalidArgumentException('non-nullable service_document_type cannot be null');
        }
        if ((mb_strlen($service_document_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $service_document_type when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 4.');
        }

        $this->container['service_document_type'] = $service_document_type;

        return $this;
    }

    /**
     * Gets service_document
     *
     * @return string|null
     */
    public function getServiceDocument()
    {
        return $this->container['service_document'];
    }

    /**
     * Sets service_document
     *
     * @param string|null $service_document Service Document ID
     *
     * @return self
     */
    public function setServiceDocument($service_document)
    {
        if (is_null($service_document)) {
            throw new \InvalidArgumentException('non-nullable service_document cannot be null');
        }
        if ((mb_strlen($service_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $service_document when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 10.');
        }

        $this->container['service_document'] = $service_document;

        return $this;
    }

    /**
     * Gets service_document_item
     *
     * @return string|null
     */
    public function getServiceDocumentItem()
    {
        return $this->container['service_document_item'];
    }

    /**
     * Sets service_document_item
     *
     * @param string|null $service_document_item Service Document Item ID
     *
     * @return self
     */
    public function setServiceDocumentItem($service_document_item)
    {
        if (is_null($service_document_item)) {
            throw new \InvalidArgumentException('non-nullable service_document_item cannot be null');
        }
        if ((mb_strlen($service_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $service_document_item when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 6.');
        }

        $this->container['service_document_item'] = $service_document_item;

        return $this;
    }

    /**
     * Gets business_solution_order
     *
     * @return string|null
     */
    public function getBusinessSolutionOrder()
    {
        return $this->container['business_solution_order'];
    }

    /**
     * Sets business_solution_order
     *
     * @param string|null $business_solution_order business_solution_order
     *
     * @return self
     */
    public function setBusinessSolutionOrder($business_solution_order)
    {
        if (is_null($business_solution_order)) {
            throw new \InvalidArgumentException('non-nullable business_solution_order cannot be null');
        }
        if ((mb_strlen($business_solution_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_solution_order when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 10.');
        }

        $this->container['business_solution_order'] = $business_solution_order;

        return $this;
    }

    /**
     * Gets business_solution_order_item
     *
     * @return string|null
     */
    public function getBusinessSolutionOrderItem()
    {
        return $this->container['business_solution_order_item'];
    }

    /**
     * Sets business_solution_order_item
     *
     * @param string|null $business_solution_order_item business_solution_order_item
     *
     * @return self
     */
    public function setBusinessSolutionOrderItem($business_solution_order_item)
    {
        if (is_null($business_solution_order_item)) {
            throw new \InvalidArgumentException('non-nullable business_solution_order_item cannot be null');
        }
        if ((mb_strlen($business_solution_order_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $business_solution_order_item when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 6.');
        }

        $this->container['business_solution_order_item'] = $business_solution_order_item;

        return $this;
    }

    /**
     * Gets higher_level_item_usage
     *
     * @return string|null
     */
    public function getHigherLevelItemUsage()
    {
        return $this->container['higher_level_item_usage'];
    }

    /**
     * Sets higher_level_item_usage
     *
     * @param string|null $higher_level_item_usage ID for higher-level item usage
     *
     * @return self
     */
    public function setHigherLevelItemUsage($higher_level_item_usage)
    {
        if (is_null($higher_level_item_usage)) {
            throw new \InvalidArgumentException('non-nullable higher_level_item_usage cannot be null');
        }
        if ((mb_strlen($higher_level_item_usage) > 1)) {
            throw new \InvalidArgumentException('invalid length for $higher_level_item_usage when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemType., must be smaller than or equal to 1.');
        }

        $this->container['higher_level_item_usage'] = $higher_level_item_usage;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001SAPMessage[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001SAPMessage[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _billing_document
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|null
     */
    public function getBillingDocument()
    {
        return $this->container['_billing_document'];
    }

    /**
     * Sets _billing_document
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentType|null $_billing_document _billing_document
     *
     * @return self
     */
    public function setBillingDocument($_billing_document)
    {
        if (is_null($_billing_document)) {
            throw new \InvalidArgumentException('non-nullable _billing_document cannot be null');
        }
        $this->container['_billing_document'] = $_billing_document;

        return $this;
    }

    /**
     * Gets _item_partner
     *
     * @return \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemPartnerType[]|null
     */
    public function getItemPartner()
    {
        return $this->container['_item_partner'];
    }

    /**
     * Sets _item_partner
     *
     * @param \BeLenka\SAP\BillingDocumentODV4\Model\ComSapGatewaySrvdA2xApiBillingdocumentV0001BillingDocumentItemPartnerType[]|null $_item_partner _item_partner
     *
     * @return self
     */
    public function setItemPartner($_item_partner)
    {
        if (is_null($_item_partner)) {
            throw new \InvalidArgumentException('non-nullable _item_partner cannot be null');
        }
        $this->container['_item_partner'] = $_item_partner;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


