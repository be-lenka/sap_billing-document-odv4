<?php
/**
 * ComSapGatewaySrvdA2xApiBillingdocumentV0001DBillgDocCrteFrmSDDocRefPPCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billing Document
 *
 * Billing documents collectively refer to customer invoices, credit memos, debit memos, pro forma invoices, and the related cancellation documents. This service, which offers both synchronous and asynchronous processing, makes billing document data available through its header, item, and partner entities. You can extend it with custom fields via key user extensibility.      You can use this service to do the following:   - Create billing documents with reference to billable SD documents in your system   - Read most billing document fields at header and item level   - Update specific billing document fields, including custom fields added through extensibility   - Post billing documents to financial accounting to create the corresponding journal entriesÂ 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BillingDocumentODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\BillingDocumentODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiBillingdocumentV0001DBillgDocCrteFrmSDDocRefPPCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiBillingdocumentV0001DBillgDocCrteFrmSDDocRefPPCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_billingdocument.v0001.D_BillgDocCrteFrmSDDocRefPP-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sd_document' => 'string',
        'billing_document_type' => 'string',
        'billing_document_date' => '\DateTime',
        'destination_country' => 'string',
        'sales_organization' => 'string',
        'sd_document_category' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sd_document' => null,
        'billing_document_type' => null,
        'billing_document_date' => 'date',
        'destination_country' => null,
        'sales_organization' => null,
        'sd_document_category' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sd_document' => false,
		'billing_document_type' => false,
		'billing_document_date' => true,
		'destination_country' => false,
		'sales_organization' => false,
		'sd_document_category' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sd_document' => 'SDDocument',
        'billing_document_type' => 'BillingDocumentType',
        'billing_document_date' => 'BillingDocumentDate',
        'destination_country' => 'DestinationCountry',
        'sales_organization' => 'SalesOrganization',
        'sd_document_category' => 'SDDocumentCategory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sd_document' => 'setSdDocument',
        'billing_document_type' => 'setBillingDocumentType',
        'billing_document_date' => 'setBillingDocumentDate',
        'destination_country' => 'setDestinationCountry',
        'sales_organization' => 'setSalesOrganization',
        'sd_document_category' => 'setSdDocumentCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sd_document' => 'getSdDocument',
        'billing_document_type' => 'getBillingDocumentType',
        'billing_document_date' => 'getBillingDocumentDate',
        'destination_country' => 'getDestinationCountry',
        'sales_organization' => 'getSalesOrganization',
        'sd_document_category' => 'getSdDocumentCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sd_document', $data ?? [], null);
        $this->setIfExists('billing_document_type', $data ?? [], null);
        $this->setIfExists('billing_document_date', $data ?? [], null);
        $this->setIfExists('destination_country', $data ?? [], null);
        $this->setIfExists('sales_organization', $data ?? [], null);
        $this->setIfExists('sd_document_category', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sd_document']) && (mb_strlen($this->container['sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['billing_document_type']) && (mb_strlen($this->container['billing_document_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'billing_document_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['destination_country']) && (mb_strlen($this->container['destination_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'destination_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['sales_organization']) && (mb_strlen($this->container['sales_organization']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_organization', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sd_document_category']) && (mb_strlen($this->container['sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'sd_document_category', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sd_document
     *
     * @return string|null
     */
    public function getSdDocument()
    {
        return $this->container['sd_document'];
    }

    /**
     * Sets sd_document
     *
     * @param string|null $sd_document Sales and Distribution Document Number
     *
     * @return self
     */
    public function setSdDocument($sd_document)
    {
        if (is_null($sd_document)) {
            throw new \InvalidArgumentException('non-nullable sd_document cannot be null');
        }
        if ((mb_strlen($sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sd_document when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001DBillgDocCrteFrmSDDocRefPPCreate., must be smaller than or equal to 10.');
        }

        $this->container['sd_document'] = $sd_document;

        return $this;
    }

    /**
     * Gets billing_document_type
     *
     * @return string|null
     */
    public function getBillingDocumentType()
    {
        return $this->container['billing_document_type'];
    }

    /**
     * Sets billing_document_type
     *
     * @param string|null $billing_document_type billing_document_type
     *
     * @return self
     */
    public function setBillingDocumentType($billing_document_type)
    {
        if (is_null($billing_document_type)) {
            throw new \InvalidArgumentException('non-nullable billing_document_type cannot be null');
        }
        if ((mb_strlen($billing_document_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $billing_document_type when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001DBillgDocCrteFrmSDDocRefPPCreate., must be smaller than or equal to 4.');
        }

        $this->container['billing_document_type'] = $billing_document_type;

        return $this;
    }

    /**
     * Gets billing_document_date
     *
     * @return \DateTime|null
     */
    public function getBillingDocumentDate()
    {
        return $this->container['billing_document_date'];
    }

    /**
     * Sets billing_document_date
     *
     * @param \DateTime|null $billing_document_date billing_document_date
     *
     * @return self
     */
    public function setBillingDocumentDate($billing_document_date)
    {
        if (is_null($billing_document_date)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_document_date'] = $billing_document_date;

        return $this;
    }

    /**
     * Gets destination_country
     *
     * @return string|null
     */
    public function getDestinationCountry()
    {
        return $this->container['destination_country'];
    }

    /**
     * Sets destination_country
     *
     * @param string|null $destination_country Destination Country/Region
     *
     * @return self
     */
    public function setDestinationCountry($destination_country)
    {
        if (is_null($destination_country)) {
            throw new \InvalidArgumentException('non-nullable destination_country cannot be null');
        }
        if ((mb_strlen($destination_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $destination_country when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001DBillgDocCrteFrmSDDocRefPPCreate., must be smaller than or equal to 3.');
        }

        $this->container['destination_country'] = $destination_country;

        return $this;
    }

    /**
     * Gets sales_organization
     *
     * @return string|null
     */
    public function getSalesOrganization()
    {
        return $this->container['sales_organization'];
    }

    /**
     * Sets sales_organization
     *
     * @param string|null $sales_organization sales_organization
     *
     * @return self
     */
    public function setSalesOrganization($sales_organization)
    {
        if (is_null($sales_organization)) {
            throw new \InvalidArgumentException('non-nullable sales_organization cannot be null');
        }
        if ((mb_strlen($sales_organization) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_organization when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001DBillgDocCrteFrmSDDocRefPPCreate., must be smaller than or equal to 4.');
        }

        $this->container['sales_organization'] = $sales_organization;

        return $this;
    }

    /**
     * Gets sd_document_category
     *
     * @return string|null
     */
    public function getSdDocumentCategory()
    {
        return $this->container['sd_document_category'];
    }

    /**
     * Sets sd_document_category
     *
     * @param string|null $sd_document_category sd_document_category
     *
     * @return self
     */
    public function setSdDocumentCategory($sd_document_category)
    {
        if (is_null($sd_document_category)) {
            throw new \InvalidArgumentException('non-nullable sd_document_category cannot be null');
        }
        if ((mb_strlen($sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sd_document_category when calling ComSapGatewaySrvdA2xApiBillingdocumentV0001DBillgDocCrteFrmSDDocRefPPCreate., must be smaller than or equal to 4.');
        }

        $this->container['sd_document_category'] = $sd_document_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


